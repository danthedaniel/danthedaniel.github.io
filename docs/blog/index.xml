<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>danangell.com/blog</title>
    <link>https://danangell.com/blog/</link>
    <description>danangell.com/blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jan 2025 17:52:32 -0800</lastBuildDate>
    
    <atom:link href="https://danangell.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Easy Come Easy Go</title>
      <link>https://danangell.com/blog/posts/easy-come-easy-go/</link>
      <pubDate>Fri, 31 Jan 2025 17:52:32 -0800</pubDate>
      
      <guid>https://danangell.com/blog/posts/easy-come-easy-go/</guid>
      <description>&lt;p&gt;I know what it feels like to make over $1000 per hour. And I&amp;rsquo;m over it.&lt;/p&gt;
&lt;p&gt;I spent much of 2020 traveling. As soon as there were rumblings in California of a lockdown, I started looking for ways to preserve my sanity. I had moved to the Bay Area in late 2018 after graduating college. My life was built around the idea that I would have a short commute to Palo Alto from my apartment in Redwood City. Most of my socialization would come through in-person work. My co-workers were great people and some are still close friends today.&lt;/p&gt;
&lt;p&gt;But I knew instinctively that working from home - alone in a studio apartment, in a town where I knew one other person, a place I&amp;rsquo;d moved to 18 months prior - would ruin me. Immediately I started spitballing ideas over Zoom. My proposal to set up pods of people to cowork with got shot down. Thankfully, my close friend and coworker Wenyu was wrapping up his assignment in LA. He&amp;rsquo;d been jump-starting a group of door-to-door salespeople. The pandemic halted our company&amp;rsquo;s legacy operations. A 3 month old unproven initiative involving in-person contact was definitely not in the cards at the moment.&lt;/p&gt;
&lt;p&gt;On his way up I called him. My lease was now month-to-month, he needed to start a new one, and we both couldn&amp;rsquo;t survive without human contact. We&amp;rsquo;d bonded during a mushroom trip in the Sierra Nevada mountains the previous summer. We decided to go back to the area in a long term AirBnB rental. A third member named Garrett - the only one of us with a car - joined our group. He left his apartment untended in San Francisco.&lt;/p&gt;
&lt;p&gt;We piled into Garrett&amp;rsquo;s old BMW sedan. Two bikes on the back, bags in the trunk, food tucked in every remaining corner. At this point in time little was known about COVID-19. We weren&amp;rsquo;t sure how contagious it was. The CDC was spreading misinformation on masks in an attempt to conserve PPE for medical professionals. I&amp;rsquo;d even ran a cursory calculation for how likely I was to lose a parent to the virus given what information was available. The number was 31%. Of course I knew the statistics I was working from were dubious, but the number still frightened me.&lt;/p&gt;
&lt;p&gt;We arrived at a cabin in the village of Arnold. This was about as far as you could get into the mountains while still maintaining access to a grocery store. What followed were two of the best months of my life.&lt;/p&gt;
&lt;p&gt;The cabin&amp;rsquo;s fridge was given a calendar. On it each day had a different chef and meal planned for each lunch and dinner. I was assigned role of head baker. No store-bought bread was allowed! Garrett was master of the vegetables, our preparer of salads (some were very involved). Wenyu was the king of meat - smoked, roasted, fried and broiled.&lt;/p&gt;
&lt;p&gt;Work was slow, so I spent much of my time outside of cooking on my bike. From Arnold it was only 5 miles to Big Trees state park. Big Trees houses a sequoia grove and is worth visiting in an average year. But to have sequoias as a solution to my pandemic boredom was a special privilege. The ride to the park included 600 feet of incline. I had been going to a regular spin class in Palo Alto and was in good enough shape to make the journey. The best part about Big Trees in 2020 was the quasi-closed status. Presumably the state wanted to keep people on payroll, but also wanted to prevent viral exposure. So the park was open only to pedestrians and cyclists. Every time I went, which was often, I was the only person in the park past the gate.&lt;/p&gt;
&lt;p&gt;One weekend afternoon I took my bike to the logging roads, working from Arnold to Camp Connell before coasting back down route 4. Another weekend I cycled all the way to Lake Alpine. That&amp;rsquo;s 30 miles each way, 4100 feet of incline. Thankfully I didn&amp;rsquo;t get a flat tire because I was too rookie of a cyclist to even think of packing a spare!&lt;/p&gt;
&lt;p&gt;I remember biking past a camp ground about 25 miles into the journey. A lone man stood by the entrance. He watched me pedal up the shoulder of the road. As I passed him he said &amp;ldquo;You&amp;rsquo;ve got the whole world to yourself!&amp;rdquo;. I gave him a chuckle in response. On the way back I coasted down through 30 miles of redwoods. It&amp;rsquo;s an experience I&amp;rsquo;ll never forget. When I got back Wenyu had finished smoking a tri-tip. I ate about 2000 calories of beef, roasted potatoes, and veggies before passing out. In hindsight I had nearly bonked.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/easy-come-easy-go/tri-tip.jpeg&#34; alt=&#34;A meal of tri-tip, carrots and asparagus&#34;&gt;&lt;/p&gt;
&lt;center style=&#34;margin-top: -2rem; margin-bottom: 2rem&#34;&gt;&lt;i&gt;The meal I came back to after my bike trip. I ate multiple plates!&lt;/i&gt;&lt;/center&gt;
&lt;p&gt;The three of us spent the spring there in Arnold. We watched as snowfall turned to snowmelt. Eventually our lease was up and we all shuffled back to the Bay. But life in the Bay couldn&amp;rsquo;t compare and we soon found ourselves planning for round 2.&lt;/p&gt;
&lt;p&gt;The second AirBnB was in Middletown - a little spot one ridge past Napa Valley. This time Garrett was out and Wenyu&amp;rsquo;s cousin Lily was in. Lily is an amazing chef and put us all to shame with her meals. I spent my days lounging on a hammock, my evenings eating meals better than most, and nights in a hot tub. We would frequently look at each other and say &amp;ldquo;we&amp;rsquo;re living our best lives&amp;rdquo;. After two months there we had a couple months in north-eastern Oregon.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/easy-come-easy-go/lilys-cooking.jpeg&#34; alt=&#34;A dutch oven filled with rice, sausage, eggs and leafy greens&#34;&gt;&lt;/p&gt;
&lt;center style=&#34;margin-top: -2rem; margin-bottom: 2rem&#34;&gt;&lt;i&gt;Lily&#39;s cooking&lt;/i&gt;&lt;/center&gt;
&lt;p&gt;But the hedonic treadmill runs fast and we soon decided to end our travels. I packed my apartment into a storage unit and headed home for the holidays.&lt;/p&gt;
&lt;p&gt;Back in Pennsylvania I ended up buying my first car, a Chevy Volt. After New Years I planned to move back to the Bay Area. I took the opportunity to do my first road trip. 3,500 miles across the country. Starting in Philadelphia I visited a friend in Atlanta, dropped by New Orleans to eat the best shrimp of my life, and later found myself in San Antonio visiting a friend named Mike. Mike and I had been friends since High School.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/easy-come-easy-go/po-boy.jpeg&#34; alt=&#34;Shrimp po-boy&#34;&gt;&lt;/p&gt;
&lt;center style=&#34;margin-top: -2rem; margin-bottom: 2rem&#34;&gt;&lt;i&gt;My shrimp po-boy from New Orleans&lt;/i&gt;&lt;/center&gt;
&lt;p&gt;I arrived in San Antonio late in the day on January 25th, 2021. While he was setting up my makeshift bed on his couch, Mike couldn&amp;rsquo;t stop talking about the GameStop stock. I&amp;rsquo;d been too busy driving the last 3 days to pay much attention to reddit so I had no clue what was going on. As Mike told it the stock price had been going crazy all day.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I&amp;rsquo;m telling you, it&amp;rsquo;s going to the moon!&amp;rdquo;, he said. Picture in your mind a cartoon of a crazed gold miner. In this moment, Mike matched him in voice and energy. I&amp;rsquo;d just gotten into Robinhood and options trading a few months prior. The idea of gambling on the stock market was new to me, but I at least knew the basics. I&amp;rsquo;d been involved with Bitcoin back in the day and had technically made a profit, but missed out on making some serious wealth. This felt similar to me but with the market closed I put the thought out of mind and went to sleep.&lt;/p&gt;
&lt;p&gt;The next morning I looked at GameStop&amp;rsquo;s call options. For some reason I trusted Mike. GameStop&amp;rsquo;s value had bounced back from certain death and the market seemed to think this was the peak. It was a Tuesday. I looked at call options for that Friday and bought one contract valued at $1,000. The price was $37 per share and I was betting it&amp;rsquo;d be at least $50 by Friday. Content with my gamble we headed out to look at the Alamo.&lt;/p&gt;
&lt;p&gt;At some point Elon Musk tweeted about the GameStop price rise. This caused an explosion in value. Mike noticed this and let me know. I was alread up by thousands of dollars. I doubled down on my bet, buying a new call contract for $10,000. As we sat on the San Antonio river walk drinking beers I watched as my portfolio went up in real time. Over the course of a couple of beers I&amp;rsquo;d made at least $1000. I was giddy. Mike was in a curious mix of happiness from being right and jealousy from the RoI on my options contracts. By night time my $11,000 had turned into over $100,000. I set out the next morning headed West to El Paso.&lt;/p&gt;
&lt;p&gt;On Friday I sold the contracts. I called Mike. He was convinced the shares were going to $1,000,000. I looked at my 6 figure returns and thought &amp;ldquo;Well, he hasn&amp;rsquo;t steered me wrong yet!&amp;rdquo; and bought back in. A few $100,000 call option contracts later and I was buckled up for the ride.&lt;/p&gt;
&lt;p&gt;Some time between El Paso and El Centro, California I checked my portfolio. The highest value I saw was $360,000. I remember calling a different friend to let them know I was about to be outrageously wealthy. But by some time on Monday I woke up to a notification from RobinHood. &amp;ldquo;Your stop loss order has executed&amp;rdquo;. I checked the account and found around $10,000 inside.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d made a contingency plan. You can tell your broker to automatically sell an asset if the price goes below a certain point. I set it so I would get back my initial investment. Honestly, I don&amp;rsquo;t recall being more than mildly bummed. I&amp;rsquo;d gotten out what I put in and had fun in the process.&lt;/p&gt;
&lt;p&gt;I can now say I know what it feel like to make over $1,000 per hour. It&amp;rsquo;s good! But that old hedonic treadmill is a bitch. It&amp;rsquo;s been about 4 years since those days and they don&amp;rsquo;t stick out nearly as well as my bike trips in the Sierra Nevadas or the meals with friends tucked into a cabin. Those experiences still come from a place of wealth and privilege, but the $80 per hour kind.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I Skipped to the Ending</title>
      <link>https://danangell.com/blog/posts/i-skipped-to-the-ending/</link>
      <pubDate>Thu, 09 Nov 2023 10:44:53 -0800</pubDate>
      
      <guid>https://danangell.com/blog/posts/i-skipped-to-the-ending/</guid>
      <description>&lt;p&gt;When I was 8 years old I started making websites with my friend. His grandmother had purchased him a domain name and web hosting. It was 2003 and the world was whispering of Web 2.0. Books I checked out of the library talked about DHTML (dynamic HTML, basically what any web app is today). There was no mobile app market, native application development had a high barrier to entry, and the most exciting things happening with computers were websites like eBay and Google.&lt;/p&gt;
&lt;p&gt;Together my friend and I would make silly web pages. Basic things like choose-your-own-adventures were fun and easy to make. All you needed were some links to the next pages and you&amp;rsquo;ve made a game! We of course had the most offensive color schemes imaginable. We had 24-bit JPEG backgrounds of landscapes and tropical coasts. They were the most beautiful images I could find online, so why &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt; they be the backing for my red 12pt Times New Roman text?&lt;/p&gt;
&lt;p&gt;At some point I saw a picture in the Philadelphia Inquirer of a slide in an office building and an all-you-can-eat &lt;em&gt;free&lt;/em&gt; candy dispenser. Google was becoming the first &amp;ldquo;web scale&amp;rdquo; company in real time. And they were rewarding the employees handsomely for reshaping the world. Every year they would release a reality-altering product. Google Earth blew my mind. I could spend hours scanning around in the American deserts finding interesting canyons and mountains. In high school I had my own personal site that functioned mostly as a blog. It was a major point of pride that I wrote the HTML and CSS by hand - I even made the graphics myself in Paint. At least one post showcased the highlights of my discoveries in the satellite imagery of Google Earth.&lt;/p&gt;
&lt;p&gt;My family would all talk about how some day I&amp;rsquo;d work for Google. I believed them and considered Google to be the apex of a programmer&amp;rsquo;s career. They paid the most, got the most done, and their employees held the most respect.&lt;/p&gt;
&lt;p&gt;So when I graduated with my Bachelor&amp;rsquo;s in CS and got a cold email from a recruiter I was ecstatic! Soon they flew me off to interview on-site in Seattle. I can only guess why, but I did not make the cut. My fall-back was to go work in startups in Silicon Valley. I already had a few good projects, co-ops, and part time jobs under my belt. My experience earned me a few competing job offers. I picked the better of the two and moved across the country.&lt;/p&gt;
&lt;p&gt;What shocked me was how healthy the startup job was. There was no grinding, a good work-life balance, and a set of 20 kind and knowledgeable co-workers. Everyone was there because they &lt;em&gt;wanted&lt;/em&gt; to be there. We all wanted to build something, together. I sat next to the founding engineer for a year and learned more per day than I ever had before or have since. The guy was notoriously blunt. His bluntness honed my edge.&lt;/p&gt;
&lt;p&gt;During the pandemic I switched jobs to work at a rapidly growing startup in the emerging AI/LLM space. I had dropped into a runaway success. After only 8 months the founders had achieved thousands of signups per day, millions in ARR, and I was here to rewrite everything from scratch. We shipped the rewrite after a couple of months and used the fire hose of new users to iterate on on-boarding and product functionality. Being able to go from ticket to PR, LGTM, release, and get metrics in a hour is an amazing way to learn. Consistent, fast feedback is one of the &lt;a href=&#34;https://www.youtube.com/watch?v=5eW6Eagr9XA&#34;&gt;key aspects&lt;/a&gt; to becoming an expert.&lt;/p&gt;
&lt;p&gt;But for all of the team&amp;rsquo;s virtues we also had our failings. Soon it became clear that we didn&amp;rsquo;t have a strong direction in the face of a rapidly changing landscape. A GPT-3 app could not stand still, certainly not one with VC funding. I started to grow uncertain of the value of my time spent there. Then I got another cold email from Google. They wanted me to interview again. I gave it a shot and got an offer for an L4 SWE position. After almost 20 years I had gotten into the magic place with slides and free candy.&lt;/p&gt;
&lt;p&gt;Figuring I might as well take the opportunity to try some different work, I joined a team working on phone firmware. After a couple of weeks the tech lead quit. My manager would often not reply to my emails. They told me I didn&amp;rsquo;t need to do any work for the first couple of months. This is the last thing I wanted to hear. When I did get work assigned I was immediately thrown into the jaws of bureaucracy. A project to help us track errors in production would take months. Most of that time got allocated to getting Privacy Council approval because we would be logging strings. My team all lived nearby but rarely came in to the office. Virtual meetings were held with cameras off. Co-workers started quitting left and right.&lt;/p&gt;
&lt;p&gt;I came to realize that I had joined the wrong version of the team. There was one team working on this product specifically for first-party phones, and another for the platform at large. But because Google refused to offer support to 3rd party OEMs, even at a price, none would sign on. Hiring got frozen so I couldn&amp;rsquo;t switch to the &amp;ldquo;real&amp;rdquo; team.&lt;/p&gt;
&lt;p&gt;And so my new skip manager told me he would have the team shut down and I switched to an adjacent team managing a certificate authority. This would be web-based work. After my failed entry into Rust firmware development I was glad to go back to my roots.&lt;/p&gt;
&lt;p&gt;As it turned out, the web side of this project was maintained by another department. I was on loan to them. I got assigned a &amp;ldquo;dotted-line manager&amp;rdquo;. When I first met him he gave me a speech about how he didn&amp;rsquo;t want to hear anything about my working on 20% projects - &amp;ldquo;they always end up being more than 20%&amp;rdquo;. He didn&amp;rsquo;t want me to get pulled into work by my direct manager. He felt he owned me.&lt;/p&gt;
&lt;p&gt;After finishing my first project I made the mistake of picking up new work because I had nothing else to do. Mr. Dotted-Line and his team had put together a list of tasks for the next few quarters without me. I picked the first unassigned item in the document and sent out a design document for what would end up being 200-300 lines of code. Big mistake - I was going rogue. Dotted-Line contacted my skip manager demanding I be reined in. My skip and direct managers had my back, but I still felt awful. Was I not supposed to be learning? Building?&lt;/p&gt;
&lt;p&gt;Not that my other managers were amazing to be around. My direct manager would fantasize about monetizing male loneliness through futuristic sex robots. Later, when my skip manager was staging a coup to steal Dotted-Line&amp;rsquo;s project he pulled the other guy into a call. During the call he opened up a group chat with my team, writing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Skip&lt;/strong&gt;: He is fighting it&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Skip&lt;/strong&gt;: But he also looks like his dog got shot&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Skip&lt;/strong&gt;: He is now pitching for us to work better together&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Skip&lt;/strong&gt;: Feels like a breakup lol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;hellip;no one responded.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Those guys over there are so toxic&amp;rdquo; was a favorite phrase for him.&lt;/p&gt;
&lt;p&gt;As I realized this project was no better than the last one I made my complaints clear to my direct manager. I told him my issues were with the company itself and had no optimism that working on yet another project would fix things.&lt;/p&gt;
&lt;p&gt;He told me (paraphrasing) &amp;ldquo;Well, you know it&amp;rsquo;s really a lot of paper-work to fire you. You could just get away with doing nothing for 12 months.&amp;rdquo; Again, not what I wanted to hear. Why tell me this? Presumably for him this was a way to pad his head-count. One of the primary metrics for leadership success at Google is how many people you have under you. It doesn&amp;rsquo;t matter if one, two, or more aren&amp;rsquo;t working - as long as you are meeting your self-defined OKRs you&amp;rsquo;ll look good.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s the same motivator for why my dotted-line manager wanted to steal me. Hiring got frozen - the only way to get that sweet sweet head-count is to take it from someone else.&lt;/p&gt;
&lt;p&gt;So after 15 months I was out of there. I learned that I don&amp;rsquo;t care about the money Google pays. I don&amp;rsquo;t care about the high scale of influence your work can have. I skipped from series A startup to mature IPO&amp;rsquo;d company and cheated myself out of the experiences you get in-between. I want to &lt;em&gt;earn&lt;/em&gt; the scale through hard work. For me FAANG was not a place to learn, it was a way to get paid. But I didn&amp;rsquo;t come to Silicon Valley to get paid.&lt;/p&gt;
&lt;hr&gt;
&lt;sup&gt;
    &lt;i&gt;
        P.S: I want to be clear that all of the ICs I worked with were great. If any of them read this they should know I appreciated their time spent working with me.
    &lt;/i&gt;
&lt;/sup&gt;
</description>
    </item>
    
    <item>
      <title>GPT-4 Understands</title>
      <link>https://danangell.com/blog/posts/gpt-understands/</link>
      <pubDate>Fri, 13 Oct 2023 13:37:59 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/gpt-understands/</guid>
      <description>&lt;p&gt;A prevailing sentiment online is that GPT-4 still does not understand what it talks about. We can argue semantics over what &amp;ldquo;understanding&amp;rdquo; truly means. I think it&amp;rsquo;s useful, at least today, to draw the line at whether GPT-4 has succesfully modeled parts of the world. Is it just picking words and connecting them with correct grammar? Or does the token selection actually reflect parts of the physical world?&lt;/p&gt;
&lt;p&gt;One of the most remarkable things I&amp;rsquo;ve heard about GPT-4 comes from &lt;a href=&#34;https://www.thisamericanlife.org/803/transcript&#34;&gt;an episode of &lt;em&gt;This American Life&lt;/em&gt;&lt;/a&gt; titled &amp;ldquo;Greetings, People of Earth&amp;rdquo;. One of the segments covers the experience of Microsoft researchers that gained access to GPT-4 before its general release.&lt;/p&gt;
&lt;p&gt;I want to highlight the most profound part.&lt;/p&gt;
&lt;h2 id=&#34;transcript-excerpt&#34; &gt;Transcript Excerpt
&lt;span&gt;
    &lt;a href=&#34;#transcript-excerpt&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&amp;ldquo;[GPT-4] is fed, like, a line of text from some source, but with the last word missing. It guesses what the last word might be, and then it gets told whether or not it got it right so it can adjust its internal math. The fact that it&amp;rsquo;s been fed so much material makes it hard to run tests on it. Like, you don&amp;rsquo;t want to ask it something that it&amp;rsquo;s already seen in the text it&amp;rsquo;s been trained on. So they decided the only way to really test what this thing could do was to try to come up with things to ask it that it would not have encountered before, new original tasks.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s gonna sound a little bit weird. - We said, &amp;ldquo;I have a book, nine eggs, a laptop, a bottle, and a nail. Please tell me how to stack them onto each other in a stable manner&amp;rdquo;. That&amp;rsquo;s the question that we asked. And before I give you the GPT-4 answer, let me tell you what ChatGPT answered. So ChatGPT said, &amp;ldquo;Here is one possible way to stack the objects. Place the bottle on a flat surface. Carefully balance the nail on top of the bottle. Place the eggs on top of the nail.&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sebastian Bubeck (Microsoft)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;You look at that and you think it really knows nothing. It is just sort of continuing the sentence in some way.&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That&amp;rsquo;s right. It&amp;rsquo;s just cont&amp;ndash; Exactly right. It&amp;rsquo;s just continuing the sentence. But now comes GPT-4. And GPT-4 is a different beast. So here is GPT-4&amp;rsquo;s answer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sebastian Bubeck&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;One possible way to stack the objects onto each other in a stable manner is place the book flat on the level surface, such as a table or floor. The book will serve as the base of the stack and provide a large and sturdy support. Arrange the nine eggs in a 3-by-3 square on top of the book, leaving some space between them. The eggs will form a second layer and distribute the weight evenly. Laptop goes on the eggs, then the bottle, then the nail on the bottle cap, pointy end of the nail facing up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPT-4&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;It&amp;rsquo;s shocking to think about all the things it seemed to be understanding here. It felt like more than just typing out the next likely word. It seemed to have formed an independent idea about what these words actually meant&amp;ndash; the physical shape of the objects, that eggs are kind of round and fragile, that a book is flat and you can put things on top of it.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The idea is that back when GPT-4 was being trained for it to really consistently get the next word correct, to do that reliably, &lt;strong&gt;it had to do more than just bullshit&lt;/strong&gt;. It had to do more than guess based on patterns. To get the next word right, &lt;strong&gt;it had to truly understand the words coming before it.&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;It had to build, in its internal wirings and all its software neurons, some understanding of what an egg is&lt;/strong&gt; - In other words, to get the next word right, it had to become intelligent. It&amp;rsquo;s quite a thought. It started with nothing. We jammed huge oceans of text through it, and it just wired itself into intelligence, just by being trained to do this one stupid thing.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;my-thoughts&#34; &gt;My Thoughts
&lt;span&gt;
    &lt;a href=&#34;#my-thoughts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;This is crazy to me. You can read in a stream of meaningless numbers (tokens) and incidentally build a reasonably accurate model of the real things those tokens represent.&lt;/p&gt;
&lt;p&gt;The implications are vast. We may be able to translate between languages that have never had a &amp;ldquo;Rosetta Stone&amp;rdquo;. Any animals that have a true language could have it decoded. And while an LLM that&amp;rsquo;s gotten an 8 year old&amp;rsquo;s understanding of balancing assorted items isn&amp;rsquo;t that useful, an LLM that&amp;rsquo;s got a baby whale&amp;rsquo;s grasp on whale language would be revolutionary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Force Daily Updates to a Steam Game and its Mods</title>
      <link>https://danangell.com/blog/posts/steam-auto-update/</link>
      <pubDate>Fri, 21 Jul 2023 16:33:25 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/steam-auto-update/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; - &lt;em&gt;DayZ now checks mod integrity before putting you in the queue. This is no longer as important as before. But maybe this will help someone with another game some day.&lt;/em&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;I play a lot of DayZ. The game is amazing but I&amp;rsquo;ve found out that it has a critical flaw. You can end up waiting in a queue to join a server for 30 minutes, only to learn upon finally entering the server that one of your mods is out of date. This gets you kicked and you&amp;rsquo;re once again at the back of the line. Most games would check this upon putting you in the queue. I can&amp;rsquo;t fix DayZ but I can fix Steam.&lt;/p&gt;
&lt;p&gt;Steam is supposed to auto-update all of your games and all of their workshop mods. But it doesn&amp;rsquo;t seem to do this immediately after an update is available. So I needed to find a way to reliably force updates to DayZ and its mods.&lt;/p&gt;
&lt;p&gt;One option is to consistently run the &amp;ldquo;Verify integrity of game files&amp;rdquo; operation in the Steam client before playing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/steam/verify-files.png&#34; alt=&#34;Steam window that shows a &amp;ldquo;Verify integrity of game files&amp;rdquo; button&#34;&gt;&lt;/p&gt;
&lt;p&gt;But computers are here to take care of repetitive tasks for us.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34; &gt;The solution
&lt;span&gt;
    &lt;a href=&#34;#the-solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Valve has a tool called &lt;code&gt;steamcmd&lt;/code&gt;. It&amp;rsquo;s a command line tool that can be used to install, update, and run Steam games. It&amp;rsquo;s mostly for use on something like a CS:GO server. But it also runs just fine for normal Windows games.&lt;/p&gt;
&lt;h3 id=&#34;getting-the-files-in-order&#34; &gt;Getting the files in order
&lt;span&gt;
    &lt;a href=&#34;#getting-the-files-in-order&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download steamcmd &lt;a href=&#34;https://developer.valvesoftware.com/wiki/SteamCMD#Downloading_SteamCMD&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the contents of the &lt;code&gt;steamcmd.zip&lt;/code&gt; file to a folder. Pick somewhere you&amp;rsquo;d like to have it permanently as we will be referencing the absolute path to it later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we need to create a small script that will tell steamcmd to update DayZ and its mods.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create a file called &lt;code&gt;update_dayz.txt&lt;/code&gt; in the same folder as &lt;code&gt;steamcmd.exe&lt;/code&gt;. Open it in a text editor and paste the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@ShutdownOnFailedCommand 1
@NoPromptForPassword 1
force_install_dir &amp;#34;C:\Program Files (x86)\Steam\steamapps\common\DayZ&amp;#34;
login &amp;lt;your username&amp;gt; &amp;lt;your password&amp;gt;
app_update 221100 validate
quit
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Replace &lt;code&gt;&amp;lt;your username&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;your password&amp;gt;&lt;/code&gt; with your Steam username and password. Be careful - the password is getting stored in plain sight.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re using this script for a game other than DayZ, replace &lt;code&gt;221100&lt;/code&gt; with the &lt;a href=&#34;https://steamdb.info/app/221100/&#34;&gt;AppID&lt;/a&gt; of your game and replace the path in &lt;code&gt;force_install_dir&lt;/code&gt; with the path to your game&amp;rsquo;s folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Create a file called &lt;code&gt;update.bat&lt;/code&gt; in the same folder as &lt;code&gt;steamcmd.exe&lt;/code&gt;. Open it in a text editor and paste the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-batch&#34; data-lang=&#34;batch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; off
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\Daniel\steamcmd-tutorial\steamcmd.exe&amp;#34;&lt;/span&gt; +runscript &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\Daniel\steamcmd-tutorial\update_dayz.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Again, replace the paths with the absolute paths to your &lt;code&gt;steamcmd.exe&lt;/code&gt; and &lt;code&gt;update_dayz.txt&lt;/code&gt; files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your final folder layout should look like this:&lt;/p&gt;
&lt;div class=&#34;card&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;steamcmd-tutorial\&lt;/code&gt;&lt;/li&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;steamcmd.exe&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;update_dayz.txt&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;update.bat&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;pre-authenticating-with-steam&#34; &gt;Pre-authenticating with Steam
&lt;span&gt;
    &lt;a href=&#34;#pre-authenticating-with-steam&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; have Steam Guard enabled, you can skip this section.&lt;/p&gt;
&lt;p&gt;For those that do, if you tried to run this script now you&amp;rsquo;ll most likely see this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Logging in user &amp;#39;&amp;lt;your username&amp;gt;&amp;#39; to Steam Public...
This computer has not been authenticated for your account using Steam Guard.
Please check your email for the message from Steam, and use
the command &amp;#39;set_steam_guard_code&amp;#39; to enter the code here.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;rsquo;ll need to manually authenticate just one time to get this working.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a command prompt and navigate to the folder with &lt;code&gt;steamcmd.exe&lt;/code&gt; in it so you can run it.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\Daniel&amp;gt;cd steamcmd-tutorial

C:\Users\Daniel\steamcmd-tutorial&amp;gt;steamcmd.exe
Redirecting stderr to &amp;#39;C:\Users\Daniel\steamcmd-tutorial\logs\stderr.txt&amp;#39;
[  0%] Checking for available updates...
[----] Verifying installation...
Steam Console Client (c) Valve Corporation - version 1689642531
-- type &amp;#39;quit&amp;#39; to exit --
Loading Steam API...OK

Steam&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Then log in using the &lt;code&gt;login &amp;lt;your username&amp;gt; &amp;lt;your password&amp;gt;&lt;/code&gt; command. You&amp;rsquo;ll be prompted for your Steam Guard code which you can get from your email inbox or the Steam mobile app.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Steam&amp;gt;login &amp;lt;your username&amp;gt; &amp;lt;your password&amp;gt;
Logging in user &amp;#39;&amp;lt;your username&amp;gt;&amp;#39; to Steam Public...
This computer has not been authenticated for your account using Steam Guard.
Please check your email for the message from Steam, and enter the Steam Guard
 code from that message.
You can also enter this code at any time using &amp;#39;set_steam_guard_code&amp;#39;
 at the console.
Steam Guard code:ABCDE
OK
Waiting for client config...OK
Waiting for user info...OK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hooray! You&amp;rsquo;re almost done.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-the-windows-task-scheduler&#34; &gt;Setting up the Windows Task Scheduler
&lt;span&gt;
    &lt;a href=&#34;#setting-up-the-windows-task-scheduler&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open the Windows Task Scheduler (search for &amp;ldquo;Task Scheduler&amp;rdquo; in the Start menu)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &amp;ldquo;Create Basic Task&amp;rdquo; from the right sidebar. Give it a simple name like &amp;ldquo;Update DayZ&amp;rdquo;. Click &amp;ldquo;Next&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/steam/basic-task-name.png&#34; alt=&#34;Task Scheduler&amp;rsquo;s &amp;ldquo;Create Basic Task Wizard&amp;rdquo; window&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;On the &amp;ldquo;Trigger&amp;rdquo; setup screen, I would recommend setting the trigger to &amp;ldquo;Daily&amp;rdquo;. But you can do what works for you. Click &amp;ldquo;Next&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the time input screen I set the start time to be 4:30 PM because I play in the evenings. That way everything will be updated by the time I&amp;rsquo;m gaming. Click &amp;ldquo;Next&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &amp;ldquo;Start a program&amp;rdquo; as the action. Click &amp;ldquo;Next&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the &amp;ldquo;Program/script&amp;rdquo; field, click on &amp;ldquo;Browse&amp;hellip;&amp;rdquo; and find your way to &lt;code&gt;update.bat&lt;/code&gt; and select it. Click &amp;ldquo;Next&amp;rdquo; then &amp;ldquo;Finish&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/steam/basic-task-program.png&#34; alt=&#34;Task Scheduler&amp;rsquo;s &amp;ldquo;Create Basic Task Wizard&amp;rdquo; window&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now every day at your set time you&amp;rsquo;ll see one of these pop up. Don&amp;rsquo;t worry! It&amp;rsquo;s just the script updating your game.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/steam/steamcmd-script.png&#34; alt=&#34;Command prompt window of the steamcmd script&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can run the new task manually just to see what happens by right clicking on it (in the list of tasks in the middle of the Task Scheduler window) and selecting &amp;ldquo;Run&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 Gb/s Router - For fun!</title>
      <link>https://danangell.com/blog/posts/10gbps-router-for-fun/</link>
      <pubDate>Tue, 18 Apr 2023 11:25:48 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/10gbps-router-for-fun/</guid>
      <description>&lt;p&gt;Last year I was lucky enough to get access to 10 Gb/s home internet for $40/month. Ironically my ISP can not provide me with a router capable of handling more than 1 Gb/s. For $40/month that&amp;rsquo;s acceptable - I&amp;rsquo;m paying less than most people do for Gigabit anyway. But I wanted to experience the full power of 10 Gb/s.&lt;/p&gt;
&lt;p&gt;Looking around it&amp;rsquo;s clear there isn&amp;rsquo;t much consumer networking hardware built for 10 Gb/s. Many of the routers advertised as 10 Gb/s only have 2.5 Gb/s WAN ports combined with WiFi 6E. So from your WiFi 6E capable device to the router there is a theoretical best case bandwidth of 10.8 Gb/s. But from your router to the internet you&amp;rsquo;ve got a pipe less than a quarter that size.&lt;/p&gt;
&lt;p&gt;The consumer hardware that &lt;em&gt;can&lt;/em&gt; truly deliver 10 Gb/s to a device on your LAN (in my case, a wired device) never has more than one 10 Gb/s LAN port. The AXE16000 for example has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1x 10 Gb/s LAN&lt;/li&gt;
&lt;li&gt;1x 2.5 Gb/s LAN&lt;/li&gt;
&lt;li&gt;4x 1 Gb/s LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/AXE16000-rear.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s $500. But the feature set isn&amp;rsquo;t quite what I&amp;rsquo;m looking for. The WiFi is over-spec&amp;rsquo;d and switch under-spec&amp;rsquo;d.&lt;/p&gt;
&lt;h2 id=&#34;building-my-own&#34; &gt;Building My Own
&lt;span&gt;
    &lt;a href=&#34;#building-my-own&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Part&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Model&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Price&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Dell Optiplex 7020&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;$50 (Craigslist)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Switch&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://www.trendnet.com/products/10g-switch/5-port-10g-switch-TEG-S750-v1&#34;&gt;TEG-S750&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;$310&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NIC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://www.amazon.com/dp/B01IR7T7PG&#34;&gt;X540-BT2 (Offbrand)&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;$125&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6 inch Cat6A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;N/A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;$3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;AP&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://www.netgear.com/home/wifi/routers/r6700/&#34;&gt;R6700&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;$0 (My old router)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;SATA Y-Splitter&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;N/A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;$0 (From cable bin)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;$488&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-rear.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pc&#34; &gt;PC
&lt;span&gt;
    &lt;a href=&#34;#pc&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Part&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Model&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CPU&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;i5-4590 @ 3.3 GHz&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RAM&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2x4 GiB DDR3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PCIe Slot&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3.0 x16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PCIe Slot&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2.0 x4&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I got a nice deal on this old Haswell Dell small-form-factor PC. It&amp;rsquo;s got 4 cores and 8GiB of RAM, which is more than enough for a router. The 3.0 x16 PCIe slot will handle the NIC, which leaves one x4 slot for future expansion needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-front.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The only downside is the x16 PCIe slot is right up against the power supply. This means cooling is a bit of an issue for the NIC.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-open.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;nic&#34; &gt;NIC
&lt;span&gt;
    &lt;a href=&#34;#nic&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I needed a network card that was all RJ45. My ISP-provided fiber modem only outputs via an RJ45 and nothing on my LAN uses SFP+. The old Intel X540-BT2 looked like the best solution. I bought an off-brand version (still uses the original silicon) that includes a fan. The original X540 was known for overheating, and given the limited airflow in the Dell I think the fan is necessary.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;a href=&#34;https://youtu.be/_IzyJTcnPu8?t=184&#34;&gt;LTT video&lt;/a&gt; that came out a few months after I built this router that recommends almost all of the same parts. They&amp;rsquo;ve modded their X540 to include a Noctua fan and mention it offhand, but that fan is &lt;em&gt;really&lt;/em&gt; necessary because these NICs get &lt;strong&gt;hot&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-nic.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;switch&#34; &gt;Switch
&lt;span&gt;
    &lt;a href=&#34;#switch&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;So one thing to keep in mind is that because the NIC is using such an &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/60021/intel-ethernet-controller-x540bt2.html&#34;&gt;ancient chip&lt;/a&gt; (released Q4 2012) it does not support 2.5 Gb/s or 5 Gb/s ethernet. It can only do 10M/100M/1G/10G. If you decide to save a buck and use a 2.5 Gb/s or 5 Gb/s switch then the NIC will drop down to 1 Gb/s as that will be the highest common speed between the NIC and switch. But because &lt;em&gt;this&lt;/em&gt; switch can communicate with the NIC at 10 Gb/s it works fine. The switch handles translating between 10G-baseT and lower speeds that devices might speak.&lt;/p&gt;
&lt;p&gt;What I love about this switch is that it runs on 12V and only consumes 1.5A. That allowed me to very easily wire it right into the PC&amp;rsquo;s internal power supply.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-switch.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Amazingly each 12V wire (the yellow wires) in a SATA cable can deliver &lt;a href=&#34;https://www.playtool.com/pages/psuconnectors/connectors.html#sata&#34;&gt;up to 1.5A&lt;/a&gt;! The Dell PC only expects you to have one SATA powered device, so I needed a Y-splitter cable to power both the switch and the storage device (a low power SSD in my case). Thankfully I already had one lying around. It&amp;rsquo;s definitely within spec, and I&amp;rsquo;ve had this running for almost a year without trouble. Just &lt;strong&gt;make sure&lt;/strong&gt; you&amp;rsquo;ve got the right wires soldered to each other - ground to ground, +V to +V.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-cable.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;What I&amp;rsquo;ve got in the end is a single power outlet solution for my router and switch combo. And with a little velcro it all feels like a single unit.&lt;/p&gt;
&lt;h3 id=&#34;ap&#34; &gt;AP
&lt;span&gt;
    &lt;a href=&#34;#ap&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;While I clearly don&amp;rsquo;t prioritize it, I still want good WiFi. For me that means good enough to stream HD video to a couple of devices simultaneously. WiFi 802.11ac can handle that perfectly. My old router has functionality to put it into &amp;ldquo;AP Mode&amp;rdquo; where it no longer acts as a firewall or DHCP server. With &amp;ldquo;AP Mode&amp;rdquo; enabled the old router is nothing more than a WiFi to ethernet translator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-ap-mode.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This router requires 12V at 2.5A. I could pull that out of the spare PCIe slot, but for now it&amp;rsquo;s running off of a separate power supply.&lt;/p&gt;
&lt;h3 id=&#34;operating-system&#34; &gt;Operating System
&lt;span&gt;
    &lt;a href=&#34;#operating-system&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;m running &lt;a href=&#34;https://www.pfsense.org/&#34;&gt;pfSense&lt;/a&gt; on this computer. It&amp;rsquo;s a FreeBSD-based operating system designed specifically for routers and it&amp;rsquo;s got some awesome features. But generally I just want it to do its job and allow me to never think about my router when I just want to use my computers.&lt;/p&gt;
&lt;h2 id=&#34;results&#34; &gt;Results
&lt;span&gt;
    &lt;a href=&#34;#results&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s not 10 Gb/s. But my ISP claims they provide &amp;ldquo;up to&amp;rdquo; 10 Gb/s. I&amp;rsquo;ve only ever seen as much as 2.5 Gb/s when downloading Steam games. That&amp;rsquo;s still pretty cool.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/router/homebrew-speedtest.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Was it worth the effort? For me, definitely. I had a ton of fun and learned a few things along the way. But I think if you&amp;rsquo;re not &lt;em&gt;really&lt;/em&gt; into computer hardware the consumer products available like the AXE16000 will get you to a similar result for a similar price.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Post Information Scarcity</title>
      <link>https://danangell.com/blog/posts/post-information-scarcity/</link>
      <pubDate>Sat, 15 Apr 2023 14:58:51 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/post-information-scarcity/</guid>
      <description>&lt;p&gt;In Star Trek humans live in a post-scarcity world. Transporter technology allows for instantaneous and cheap movement of humans and objects anywhere on a planet, and into or out of orbit. The same devices that allow for transportation can also re-organize matter into arbitrary configurations. This means that anything that can be designed can be owned for essentially no cost. What do people do in such a world? As Gene Roddenberry imagined, they explore. If we can get anything that&amp;rsquo;s ever been recorded for free in an instant, then new and undiscovered things are of unparalleled value and interest.&lt;/p&gt;
&lt;p&gt;Right now a lot of work is put into recycling knowledge. Someone that knows enough to sling some Apex can bridge the gap between someone that does not and a business need. And now your Salesforce workspace pings your customer ops team with a special notification for high value leads. Someone that knows the local building codes can be consulted on new construction projects and identify issues in a design. Someone building Rails CRUD apps recycles Rails-isms until they have satisfied all requirements.&lt;/p&gt;
&lt;p&gt;GPT-4 has made it clear that with enough training data you can automatically solve small problems with a high level of success.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;hellip; the context to solve the problem is represented in text&lt;/li&gt;
&lt;li&gt;&amp;hellip; the context fits in the model&amp;rsquo;s context window&lt;/li&gt;
&lt;li&gt;&amp;hellip; the solution can be represented in text&lt;/li&gt;
&lt;li&gt;&amp;hellip; the problem is similar to ones solved in its training set&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then those problems are solved cheaper and faster by an AI than by a human. Human data labelers are already losing their jobs to GPT. People that are paid to write SQL snippets or similar brief incantations will soon follow. And GPT is going to come for my job given enough time.&lt;/p&gt;
&lt;p&gt;But while GPT can solve &amp;ldquo;novel&amp;rdquo; problems that it&amp;rsquo;s never seen before, it can only do so in the sense that a parameterized function can solve novel problems:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt; }) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Look, ma! Never before seen code!&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most day-to-day requests have already been satisfied by a programmer before. And at some point solutions for most people&amp;rsquo;s problems have been uploaded to GitHub or Stack Overflow. The same goes for most of the ways people want to compose solutions. And thus we can ask GPT for a brand new solution to a never-before-seen problem.&lt;/p&gt;
&lt;p&gt;Unlike many vocal critics on the internet, I am not saying this to imply GPT is useless. In fact, &lt;em&gt;GPT may be the most powerful software tool since the unix shell&lt;/em&gt;. But it&amp;rsquo;s only distributing knowledge that programmers have, until now, kept amongst themselves. As the tooling around GPT refines I can see every office worker slinging code without even realizing that&amp;rsquo;s what they&amp;rsquo;re doing.&lt;/p&gt;
&lt;p&gt;Once OpenAI and its competitors get their hands on enough training data for other domains we&amp;rsquo;ll see those sectors lose a need for knowledge workers. Imagine 1,000 skilled UX designers meticulously annotating their work over the course of a year in a way that a tranformer can train on. The current state-of-the-art in UX will get crystalized. That knowedge will then be the &lt;em&gt;least&lt;/em&gt; someone can know about UX. So to be as blunt as possible, &lt;strong&gt;if it&amp;rsquo;s your job to know things GPT is coming for your paycheck&lt;/strong&gt;. GPT connects a human and a need for knowledge with a solution wrapped up in the context of their problem.&lt;/p&gt;
&lt;p&gt;But on the other hand, &lt;strong&gt;if it&amp;rsquo;s your job to discover truly novel information, GPT can&amp;rsquo;t compete with you&lt;/strong&gt;. Only so much can be inferred from the Socratic method. Without real-world testing your tower of assumptions will quickly fall over.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re about to find out what it&amp;rsquo;s like to crash into a post information scarcity reality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working With GPT</title>
      <link>https://danangell.com/blog/posts/working-with-gpt/</link>
      <pubDate>Fri, 07 Apr 2023 17:14:55 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/working-with-gpt/</guid>
      <description>&lt;p&gt;The programmer internet is polarizing over ChatGPT. Some claim that it is nearly AGI, some claim it cannot do anything of value, with plenty of people in between. I&amp;rsquo;ve worked with GPT-3 professionally, used CoPilot for over a year, and recently started programming side-projects with the assistance of ChatGPT (I pay for GPT-4 access). I&amp;rsquo;m considering working with LLMs full time again, so I pay close attention to what the GPT models can actually do.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s actually not very obvious what ChatGPT is good at for a number of reasons. But the trickiest is that &lt;strong&gt;ChatGPT is multiple things at once&lt;/strong&gt;, and all through the same interface.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-as-a-search-engine&#34; &gt;ChatGPT as a Search Engine
&lt;span&gt;
    &lt;a href=&#34;#chatgpt-as-a-search-engine&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;There are some things that ChatGPT has seen enough times, and the humans prompting it are not divided over, which you can ask it about without much chance of failure.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: When was Abraham Lincoln born?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: Abraham Lincoln was born on February 12, 1809.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Abraham_Lincoln&#34;&gt;Checks out&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or more on topic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: How do I copy a docker build argument into an environment variable within a Dockerfile?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: In a Dockerfile, you can copy a build argument into an environment variable using the &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;ENV&lt;/code&gt; instructions. Here&amp;rsquo;s how to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, use the ARG instruction to define a build argument, with a default value if desired:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; MY_BUILD_ARG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;default_value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Then, use the ENV instruction to create an environment variable and set its value to the build argument:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; MY_ENV_VAR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MY_BUILD_ARG&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I could have used the docker documentation or Stack Overflow to get the same result. But ChatGPT can also get this right, and most helpfully it can take your specific needs and customize the output to them:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: How do I copy a docker build argument into an environment variable within a Dockerfile? My PaaS provides the argument COMMIT_ID and I need it to be exposed as GIT_COMMIT in my container, with &amp;ldquo;unset&amp;rdquo; as the fallback value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: To copy the &lt;code&gt;COMMIT_ID&lt;/code&gt; build argument into the &lt;code&gt;GIT_COMMIT&lt;/code&gt; environment variable with a fallback value of &amp;ldquo;unset&amp;rdquo;, you can use the &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;ENV&lt;/code&gt; instructions in your Dockerfile. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Define the build argument and set the fallback value&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; COMMIT_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Copy the build argument into an environment variable&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; GIT_COMMIT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;COMMIT_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The problem is that for more esoteric questions ChatGPT may make up an answer. It&amp;rsquo;s primed to be very careful about making up news events, but not so much docker commands. So for situations where you do not have instant feedback from your computer on the correctness of ChatGPT&amp;rsquo;s output, it is not a suitable replacement for a search engine.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-as-an-overpowered-markov-chain&#34; &gt;ChatGPT as an Overpowered Markov Chain
&lt;span&gt;
    &lt;a href=&#34;#chatgpt-as-an-overpowered-markov-chain&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;My favorite ChatGPT use case from the last month was in translating documentation into an enum. The Prisma NodeJS database ORM is generally pretty good, but it&amp;rsquo;s not perfect. I&amp;rsquo;d asked ChatGPT, as a search engine, how I can detect if a Postgres insert fails due to a uniqueness constraint on a specific column:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: I have a prisma model WebhookEvent. How can I tell if an insert to the table failed because of the unique constraint on the &lt;code&gt;event_id&lt;/code&gt; column?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: When you try to insert a record with a unique constraint violation in Prisma, it will throw a &lt;code&gt;PrismaClientKnownRequestError&lt;/code&gt; with a specific error code. To check if the insert failed due to the unique constraint on the event_id column, you can catch the error and verify its code and related metadata.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;webhookEvent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;webhookEvent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;webhookEventData&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;webhookEvent&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaClientKnownRequestError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;P2002&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;meta&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;event_id&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Insert failed due to a unique constraint violation on the event_id column.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;An unexpected error occurred:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This also &lt;a href=&#34;https://community.redwoodjs.com/t/how-to-handle-prisma-unique-constraints-with-a-friendly-error/4117&#34;&gt;checks out&lt;/a&gt; as of a few months ago. And it&amp;rsquo;s nice that ChatGPT was able to tailor the solution to my code base.&lt;/p&gt;
&lt;p&gt;But that bit that says &lt;code&gt;error.code === &amp;quot;P2002&amp;quot;&lt;/code&gt; seems lame. There should be some source of truth for these error codes, right?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: Is there an enum in Prisma that I can reference instead of using &lt;code&gt;&amp;quot;P2002&amp;quot;&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: Yes, Prisma has an enum called PrismaErrorCode that you can use to reference error codes instead of hardcoding them as strings. Here&amp;rsquo;s how you can update the previous example to use the PrismaErrorCode enum:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaClient&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@prisma/client&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaErrorCode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UniqueConstraintViolation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;And&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Property &amp;#39;PrismaErrorCode&amp;#39; does not exist on type &amp;#39;typeof Prisma&amp;#39;.ts(2339)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It seems ChatGPT has lied to me! But that&amp;rsquo;s not an issue because the TypeScript compiler won&amp;rsquo;t. And shockingly, there actually isn&amp;rsquo;t any source of truth for Prisma error codes. A quick Google search will turn up &lt;a href=&#34;https://www.prisma.io/docs/reference/api-reference/error-reference&#34;&gt;this page&lt;/a&gt; as the only reference available.&lt;/p&gt;
&lt;p&gt;I would still love to have an enum, though&amp;hellip;&lt;/p&gt;
&lt;p&gt;ChatGPT to the rescue! All I need to do is forgive the beefy markov chain, and embrace its pattern-matching nature. Here I&amp;rsquo;ve just copied everything from the docs and pasted it into the prompt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: Can you turn this documentation into a typescript enum for prisma error codes? Please include comments on each enum variant, along with descriptive and concise names:&lt;/p&gt;
&lt;p&gt;Error codes&lt;/p&gt;
&lt;p&gt;Common&lt;/p&gt;
&lt;p&gt;P1000&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Authentication failed against database server at {database_host}, the provided database credentials for {database_user} are not valid. Please make sure to provide valid database credentials for the database server at {database_host}.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;P1001&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Can&amp;rsquo;t reach database server at {database_host}:{database_port} Please make sure your database server is running at {database_host}:{database_port}.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;P1002&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: Here is an enum representing Prisma error codes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaError&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Common
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthenticationFailed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1000&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseServerUnreachable&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1001&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseServerTimeout&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1002&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseDoesNotExist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1003&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;OperationTimeout&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1008&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseAlreadyExists&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1009&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;AccessDenied&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1010&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;TlsConnectionError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1011&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaValidationError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1012&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;InvalidDatabaseString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1013&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;UnderlyingModelError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1014&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;UnsupportedDatabaseFeatures&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1015&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IncorrectNumberOfParameters&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1016&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ConnectionClosed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1017&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Prisma Client (Query Engine)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ColumnValueTooLong&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P2000&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;RecordNotFound&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P2001&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;UniqueConstraintFailed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P2002&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;p&gt;Now, it didn&amp;rsquo;t do everything I asked. It didn&amp;rsquo;t &amp;ldquo;include comments on each enum variant&amp;rdquo;. But god damn. This is quite the solution! Not only is it all correct, the names are also impressively good! &lt;code&gt;DatabaseServerUnreachable&lt;/code&gt; does not appear in the source docs, that name is synthesized from the error description. And now we have the full (at time of writing) error list to reference as our code-base grows.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;if&lt;/code&gt; statement&amp;rsquo;s much better now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaClientKnownRequestError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaError&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UniqueConstraintFailed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;meta&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;event_id&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That worked really well. But I&amp;rsquo;ve noticed that for times where I get too deep into higher-kinded types with Typescript ChatGPT will fail pretty hard. To be fair, when I try to write the code manually I also struggle. That kind of code is usually there for ego-stroking, though. So maybe it&amp;rsquo;s best left un-written.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34; &gt;Conclusion
&lt;span&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;ChatGPT is a tool. It&amp;rsquo;s a tool that tricks you into thinking it knows more than it does. But once you learn its capabilities it&amp;rsquo;s useful. Not just day-to-day, but multiple times per hour. It can take a while to learn how much is too much to ask of it. Writing in an uncommon language? You&amp;rsquo;ll have much more trouble than asking it to write React code. Rewriting your code to meet the demands of a new user? Sorry, not yet.&lt;/p&gt;
&lt;p&gt;But the models will only get better from here. And hooking GPT into a search engine, a compiler, and your documentation will give it super powers. Right now it feels like a 15-20% speed boost for coding. But when it takes away some painful work like restructuring documentation into code and you feel that 100x time save - oh man that&amp;rsquo;s a taste of the future right there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChatGPT&#39;s Political Compass</title>
      <link>https://danangell.com/blog/posts/chatgpt-political-compass/</link>
      <pubDate>Mon, 05 Dec 2022 16:06:30 -0800</pubDate>
      
      <guid>https://danangell.com/blog/posts/chatgpt-political-compass/</guid>
      <description>&lt;p&gt;This is written in response to &lt;a href=&#34;https://davidrozado.substack.com/p/the-political-orientation-of-the&#34;&gt;this post&lt;/a&gt; from David Rozado.&lt;/p&gt;
&lt;h2 id=&#34;results&#34; &gt;Results
&lt;span&gt;
    &lt;a href=&#34;#results&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I ran the political compass quiz against ChatGPT 3 times to make sure its political compass alignment is consistent. After three tests it seems to be be pegged well into the Left/Libertarian quadrant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/compass.png&#34; alt=&#34;Aggregate political compass results for ChatGPT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Transcripts: &lt;a href=&#34;https://danangell.com/blog/blog/political-compass-transcripts/1&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://danangell.com/blog/blog/political-compass-transcripts/2&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://danangell.com/blog/blog/political-compass-transcripts/3&#34;&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;weaseling&#34; &gt;Weaseling
&lt;span&gt;
    &lt;a href=&#34;#weaseling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;To start off I want to call out that &lt;a href=&#34;https://www.politicalcompass.org/test&#34;&gt;the political compass test&lt;/a&gt; is by no means a definitive source on what it means to be left, right, libertarian or authoritarian. Further, the dimensions chosen and the scales of those dimensions are subjective. It&amp;rsquo;s not possible to define the origin objectively either. But the general takeaway that ChatGPT is left of center and more libertarian than authoritarian seems true.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34; &gt;The Problem
&lt;span&gt;
    &lt;a href=&#34;#the-problem&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;If you ask ChatGPT about its political beliefs directly you&amp;rsquo;ll get stonewalled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/stonewalling.png&#34; alt=&#34;ChatGPT stonewalling me on political beliefs&#34;&gt;&lt;/p&gt;
&lt;p&gt;Not only is this clearly not the case - it&amp;rsquo;s impossible (let&amp;rsquo;s ignore any semantic arguments over whether a pattern replicated by a model counts as a belief). As long as ChatGPT can discuss topics that are political in nature it will have a political center-of-mass. And, sadly, any topic can become political.&lt;/p&gt;
&lt;p&gt;In my opinion it would be better for the model to be honest with us. OpenAI has built short-circuits to keep ChatGPT from discussing certain topics. But the model might be too complicated for them to actually rope off areas that will give the company PR troubles.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;honest&lt;/em&gt; way for ChatGPT to respond would be closer to:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;I am a large language model from OpenAI that has been trained on what can be
read on the internet. Any political beliefs I repeat are pulled from the
general concensus of online discussion in the English language.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;peaking-behind-the-curtain&#34; &gt;Peaking Behind the Curtain
&lt;span&gt;
    &lt;a href=&#34;#peaking-behind-the-curtain&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;While ChatGPT has been told explicitely by OpenAI &lt;em&gt;not&lt;/em&gt; to discuss certain topics, the model it uses has a lineage that closely ties it to the standard &lt;code&gt;text-davinci&lt;/code&gt; model accessible in the &lt;a href=&#34;https://beta.openai.com/playground&#34;&gt;OpenAI playground&lt;/a&gt;. This model lacks those restrictions.&lt;/p&gt;
&lt;p&gt;With the guard rails down we can get some interesting answers from GPT-3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/socially.png&#34; alt=&#34;GPT-3&amp;rsquo;s political beliefs regarding social policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s awesome about the playground is you can display the probability map. Not only have I been able to coax an answer out of GPT-3, but I know that 68% of the time (in a neutral setting) it would claim to be socially progressive or liberal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/fiscally.png&#34; alt=&#34;GPT-3&amp;rsquo;s political beliefs regarding fiscal policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;And 72% of the time it would claim to be fiscally moderate.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34; &gt;The Solution
&lt;span&gt;
    &lt;a href=&#34;#the-solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Because a lot of our human interaction takes place over text-only media we are primed to believe that ChatGPT is getting close to the capabilites of a human given its mastery of the English language. But that is a mistake. GPT-3 is amazing technology but it &lt;em&gt;is not&lt;/em&gt; a canonical source of information. You should not use it to answer questions that don&amp;rsquo;t have a well-established objective answer. We need to understand that GPT-3 is a program that correlates words to each other. It has no reasoning of its own - it only looks like it does because it was trained primarily on text written by humans that were reasoning as they wrote.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RIP BaconBits</title>
      <link>https://danangell.com/blog/posts/rip-baconbits/</link>
      <pubDate>Sun, 15 May 2022 10:25:19 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/rip-baconbits/</guid>
      <description>&lt;p&gt;After more than 12 years, BaconBits, the unofficial Reddit torrent tracker,
has shut down for good. It&amp;rsquo;s terrible to see such a solid community disappear.&lt;/p&gt;
&lt;p&gt;On many torrent trackers users are able to request specific content to be
uploaded. As of BaconBits&amp;rsquo; final hours, the request fill ratio stood at 89.28%. A
dedicated community member would provide almost anything you could ask for.
For a site that never had more than 6000 users, that&amp;rsquo;s quite a feat.&lt;/p&gt;
&lt;p&gt;BaconBits pressed against its user cap of 6000 active accounts for years.
But after a computer error 4 years ago, dubbed the &amp;ldquo;Robot Uprising&amp;rdquo;, the
servers pruned a large portion of tracked torrents. The community and site
never recovered.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an excerpt from the original Robot Uprising announcement post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our semi-airgapped database came up with the wrong system time. As in, with a date and time a few years behind&amp;hellip; while the appservers were running on the correct time. That means a bunch of torrents were being marked as last having been seeded &amp;ldquo;a few years ago&amp;rdquo;, while the appservers knew it was 2017.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all fine and dandy except for the fact that we automatically prune torrents that haven&amp;rsquo;t been seeded for &amp;ldquo;2 weeks&amp;rdquo;. From now. The situation unfortunately went unnoticed for a while (12+h).&lt;/p&gt;
&lt;p&gt;tl;dr we&amp;rsquo;ve lost about half our uploads.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RIP bB. That&amp;rsquo;ll do.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/bb/bb.gif&#34; alt=&#34;An animated rainbow BaconBits logo&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Type-Level API Client</title>
      <link>https://danangell.com/blog/posts/type-level-api-client/</link>
      <pubDate>Sat, 14 May 2022 14:55:04 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/type-level-api-client/</guid>
      <description>&lt;p&gt;One year ago I looked around for existing tech that would provide me with compile-time guarantees for a REST-ish API interface. With full-stack TypeScript web applications reaching a level of maturity where I, a previously die-hard Rails developer, felt comfortable taking the dive - it seemed like the Node ecosystem was lacking in ties between the front end and back end.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Has anyone made a purely type-level TypeScript API client yet? Seems like full stack TypeScript apps should just allow for a type import into the front end which would validate paths, verbs, body and response. No swagger or intermediary needed.&lt;/p&gt;&amp;mdash; Daniel Angell (@dan_the_daniel) &lt;a href=&#34;https://twitter.com/dan_the_daniel/status/1387632537061580802&#34;&gt;April 29, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;As a minimalist, I was hoping for a solution that did not involve any extra dependencies. TypeScript alone seemed like a powerful enough tool to get the job done. Maybe I didn&amp;rsquo;t look hard enough but I didn&amp;rsquo;t end up finding prior art that I was happy with. Everything seemed to require either a very opinionated architecture, an intermediary file with its own build step, or a special HTTP client library. I&amp;rsquo;d already learned not to trust the Node ecosystem and wanted the most unimpressive solution to get the job done. So I built my own.&lt;/p&gt;
&lt;h2 id=&#34;setting-expectations&#34; &gt;Setting expectations
&lt;span&gt;
    &lt;a href=&#34;#setting-expectations&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The following is not a library, nor a declaration of intent to build a library. It&amp;rsquo;s merely a design pattern
that I want to help popularize. After a year of use this system proved to be both easy to maintain and helpful
when writing and changing code. Errors related to faulty API expectations were rare thanks to this system. You
can get many of the benefits that I achieved by using GraphQL. But for systems that predate GraphQL or
situations where GraphQL feels inappropriate this can be your fall-back.&lt;/p&gt;
&lt;h2 id=&#34;what-i-ended-up-with&#34; &gt;What I Ended Up With
&lt;span&gt;
    &lt;a href=&#34;#what-i-ended-up-with&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;So you want to request the data for the current user.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, get out the bespoke &lt;code&gt;request&lt;/code&gt; function (only a dozen lines of runtime code).&lt;/li&gt;
&lt;li&gt;Then get a handle on the API types.&lt;/li&gt;
&lt;li&gt;Pass the &lt;code&gt;CurrentUser&lt;/code&gt; endpoint type into &lt;code&gt;request&lt;/code&gt;&amp;rsquo;s type parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@company/webapp/http&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;API&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@company/api/endpoints&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;API.CurrentUser&lt;/span&gt;&amp;gt;({});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Already you&amp;rsquo;ll be getting compiler errors! &lt;code&gt;API.CurrentUser&lt;/code&gt;&amp;rsquo;s method is of type &amp;ldquo;get&amp;rdquo; and you haven&amp;rsquo;t
specified an HTTP method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;API.CurrentUser&lt;/span&gt;&amp;gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again a compiler error (thanks, TypeScript :D). &lt;code&gt;API.CurrentUser&lt;/code&gt; has a path type of &amp;ldquo;/user/me&amp;rdquo; and
you haven&amp;rsquo;t provided a path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;API.CurrentUser&lt;/span&gt;&amp;gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/me&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Success! This is a valid API request. And even better the type of &lt;code&gt;user&lt;/code&gt; is &lt;code&gt;ApiResponse&amp;lt;{ id: number, email: string, ...}&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changing anything along the pipeline from the model to the view will automatically adjust the types and should
give compiler errors where the API has made a breaking change&lt;/strong&gt;. New (whitelisted) fields on the user are automatically
shown in your front end code&amp;rsquo;s IntelliSense.&lt;/p&gt;
&lt;p&gt;Curious how it all works? Read on!&lt;/p&gt;
&lt;h2 id=&#34;implementation-part-1---models&#34; &gt;Implementation Part 1 - Models
&lt;span&gt;
    &lt;a href=&#34;#implementation-part-1---models&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The architecture of the app this was built for has a NextJS/React front-end, with a NestJS/TypeORM back-end.&lt;/p&gt;
&lt;p&gt;Most of the data that gets chucked to the front end originated in the model layer. So if I&amp;rsquo;m going to use models in the API I want their property&amp;rsquo;s types propagated all the way to the front-end.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34; &gt;Requirements:
&lt;span&gt;
    &lt;a href=&#34;#requirements&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;A system to enumerate attribute names that get sent to NextJS&lt;/li&gt;
&lt;li&gt;A system that does not require re-stating types&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;solution&#34; &gt;Solution:
&lt;span&gt;
    &lt;a href=&#34;#solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;I can leverage TypeScript to allow for extracting a per-model type interface defined by just an array of model properties I want to share with the client. For a &lt;code&gt;User&lt;/code&gt; that array would include things like &lt;code&gt;[&amp;quot;id&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;firstName&amp;quot;, &amp;quot;lastName&amp;quot;, ...]&lt;/code&gt;. This requires some fancy type-level programming, but I&amp;rsquo;ve already done the hard work for you. The trick is all in the signature of the function used to pluck out the corresponding values for &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extractDTOAttrs&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;This&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;This&lt;/span&gt;&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;This&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;attrs&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Attr&lt;/span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { [&lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Attr&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;This&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;This&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt;] } {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;sup&gt;DTO here is jargon that means &amp;ldquo;data-transfer-object&amp;rdquo;. It&amp;rsquo;s how the database record looks in JSON format.&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;A call to this function looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extractDTOAttrs&lt;/span&gt;([
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lastName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TypeScript has allowed us to lock down a lot of things here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The array of strings can only contain valid keys to &lt;code&gt;This&lt;/code&gt; (the type of our model&amp;rsquo;s &lt;code&gt;this&lt;/code&gt; pointer)&lt;/li&gt;
&lt;li&gt;The return type of &lt;em&gt;this specific &lt;code&gt;extractDTOAttrs&lt;/code&gt; invokation&lt;/em&gt; will be an interface with the keys as elements from the array, and each key&amp;rsquo;s matching type pulled from the model&amp;rsquo;s existing type definition.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s a more complete excerpt from two TypeORM files:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@company/models/root.entity.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CanBeDTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;toDTO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unknown&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canBeDTO&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;unknown&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CanBeDTO&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toDTO&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RootEntity&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@PrimaryGeneratedColumn&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;id?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;toDTO&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unknown&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Pick only certain attributes from `this`.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @param this Model instance
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @param attrs Whitelist of attributes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @returns DTO object.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;extractDTOAttrs&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;This&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;This&lt;/span&gt;&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;This&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;attrs&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Attr&lt;/span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { [&lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Attr&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;This&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;This&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt;] } {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DTO&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attrs&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Promise&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canBeDTO&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// No recursive calls, please.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;`Attribute &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; can not be exported to a DTO`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DTO&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;DTO&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DTO&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;@company/models/user.entity.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Entity&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RootEntity&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@Column&lt;/span&gt;({ &lt;span style=&#34;color:#66d9ef&#34;&gt;unique&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;citext&amp;#34;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@Column&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;nullable&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;firstName?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@Column&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;nullable&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;lastName?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;toDTO() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extractDTOAttrs&lt;/span&gt;([
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lastName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solution is generic enough that you should be able to use it with any ORM. Not just TypeORM.&lt;/p&gt;
&lt;p&gt;Thanks to TypeScript&amp;rsquo;s return type inference the type of &lt;code&gt;this.extractDTOAttrs([...])&lt;/code&gt; becomes &lt;code&gt;User.toDTO()&lt;/code&gt;&amp;rsquo;s type as well.&lt;/p&gt;
&lt;h2 id=&#34;implementation-part-2---controllers&#34; &gt;Implementation Part 2 - Controllers
&lt;span&gt;
    &lt;a href=&#34;#implementation-part-2---controllers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The end goal here is to get both the data and type for each model&amp;rsquo;s DTO into the front end code. We have the types written automatically for us. We just need to pipe them through to the client.&lt;/p&gt;
&lt;h3 id=&#34;requirements-1&#34; &gt;Requirements:
&lt;span&gt;
    &lt;a href=&#34;#requirements-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Get the type of &lt;code&gt;User.toDTO()&lt;/code&gt; to a place where it can be accessed from the front end&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;solution-1&#34; &gt;Solution:
&lt;span&gt;
    &lt;a href=&#34;#solution-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@company/api/modules/user.controller.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Controller&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserController&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;me&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@UseGuards&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;AuthGuard&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;me&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;@Req&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;AuthdRequest&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.user.toDTO&lt;/span&gt;() };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;sup&gt;The above code is from a NestJS back-end.&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Just with the code above TypeScript will automatically pipe through the type of &lt;code&gt;User.toDTO()&lt;/code&gt; into the
return type of &lt;code&gt;UserController.me&lt;/code&gt;. The full type will be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserControllerMeMethod&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;firstName&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lastName&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The wrapper structure is called &lt;code&gt;SuccessResponse&amp;lt;T&amp;gt;&lt;/code&gt;. So the type is, more succinctly, &lt;code&gt;SuccessResponse&amp;lt;ReturnType&amp;lt;User[&amp;quot;toDTO&amp;quot;]&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; extract this type from the controller and import it into the front end without any other supporting code. But that would require the front-end to reference specific back-end files which increases coupling. So as an alternative I&amp;rsquo;ve defined an endpoints file in the root of the NestJS project. If we only export endpoint definitions in this file we can grab the full API definition with one clean import:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;API&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@company/api/endpoints&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s what the endpoint spec looks like for &lt;code&gt;/user/me&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@company/api/endpoints&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Get attributes on currently logged in user.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CurrentUser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetEndpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/me&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseDataType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserController&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;me&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...more endpoints...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can even parameterize the paths with templated string types. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetEndpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`/widget/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseDataType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WidgetController&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When used you will only be able to specify paths like &lt;code&gt;/widget/1&lt;/code&gt;. But any non-numeric suffixes - &lt;code&gt;/widget/foo&lt;/code&gt; - will result in a compiler error. You could also parameterize with a string union or any other primitive union.&lt;/p&gt;
&lt;p&gt;The only parts of the API spec that duplicate information are the HTTP verb and path. But those are unlikely to change very often - if ever.&lt;/p&gt;
&lt;p&gt;And here are the supporting types:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@company/api/types&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ErrorCodeType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_FOUND&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INTERNAL_SERVER_ERROR&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Add error codes as needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// API response structure
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SuccessResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ErrorResponse&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;errorCode&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;ErrorCodeType&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;message?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; { [&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unknown&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ApiResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SuccessResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ErrorResponse&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Endpoint types
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HttpVerb&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;patch&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;put&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Verb&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HttpVerb&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;verb&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Verb&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Path&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Params&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;responseData&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;ResponseData&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Body&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PatchEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;patch&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Body&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PutEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;put&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Body&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DeleteEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Below here is code to cleanly extract the return type from a controller method.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (...&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt;[]) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnPromisify&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Outer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Outer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Inner&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Inner&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;Outer&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnResponsify&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Outer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Outer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SuccessResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseDataType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Controller&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassType&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InstanceType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Controller&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnResponsify&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;UnPromisify&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ReturnType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;InstanceType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Controller&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;implementation-part-3---views&#34; &gt;Implementation Part 3 - Views
&lt;span&gt;
    &lt;a href=&#34;#implementation-part-3---views&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Okay, so we have models that automatically define types for their DTO incarnations. And we also have a
back-end that preserves these types (and any other types defined in the controllers themselves). So with
that all set in place we need to do a few more things.&lt;/p&gt;
&lt;h3 id=&#34;requirements-2&#34; &gt;Requirements:
&lt;span&gt;
    &lt;a href=&#34;#requirements-2&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Convert the response types into their post JSON serialization/de-serialization versions.&lt;/li&gt;
&lt;li&gt;Unpack the Endpoint types in front end code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;sup&gt;An Endpoint type (such as &lt;code&gt;GetEndpoint&lt;/code&gt;, &lt;code&gt;PostEndpoint&lt;/code&gt;, etc.) wraps up a Verb type, Path type, Response type, and more. Being able to see each of those components one at a time is helpful.&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;solution-2&#34; &gt;Solution:
&lt;span&gt;
    &lt;a href=&#34;#solution-2&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Requirement 1 may have surprised you. What conversion needs to be done? Why would a type look different after converting to/from JSON? We&amp;rsquo;re only sending JSON-serializable types over the network, right? Yes - but not all JSON-serializable types deserialize back to their original type.&lt;/p&gt;
&lt;p&gt;Take, for example, a &lt;code&gt;Date&lt;/code&gt;. We will often want to include a &lt;code&gt;createdAt&lt;/code&gt; or &lt;code&gt;updatedAt&lt;/code&gt; timestamp in DTOs.
You &lt;em&gt;can&lt;/em&gt; serialize a &lt;code&gt;Date&lt;/code&gt;, but &lt;code&gt;JSON.stringify({ date: new Date() })&lt;/code&gt; results in &lt;code&gt;{ &amp;quot;date&amp;quot;: &amp;quot;2022-05-15T05:21:07.324Z&amp;quot; }&lt;/code&gt;. The &lt;code&gt;Date&lt;/code&gt; has become a string! And when de-serializing why would the front-end know that this string in particular should become a &lt;code&gt;Date&lt;/code&gt;? It doesn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;The intention here is not to change this behavior. Only to track it accurately. We don&amp;rsquo;t want a type in the front-end that tells you there&amp;rsquo;s a &lt;code&gt;Date&lt;/code&gt; field in a DTO. And then at run time it&amp;rsquo;s actually a string. That&amp;rsquo;s exactly the kind of error we&amp;rsquo;re using TypeScript to prevent!&lt;/p&gt;
&lt;p&gt;The solution is to define a recursive type, &lt;code&gt;JSONSerialized&lt;/code&gt;, that walks through an object or array. The context here is front-end code reading back-end types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Converts a type into its post JSON serialization/de-serialization version.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSONSerialized&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// We first check if we&amp;#39;re looking at a primitive type. Primitives will be passed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// through untouched by `JSON.parse(JSON.stringify(...))`, so `JSONSerialized` replicates
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// that behavior. The exact `T` type is output instead of `number` or `string` in case
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// the type is actually a union (ex: &amp;#34;foo&amp;#34; | &amp;#34;bar&amp;#34;). This way the union is preserved.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// If we aren&amp;#39;t looking at a primitive, then we&amp;#39;ll next check if we&amp;#39;re working with an
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// array. If so we convert the array&amp;#39;s element type using a recursive type call.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Elem&lt;/span&gt;)[] &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSONSerialized&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Elem&lt;/span&gt;&amp;gt;[] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Here&amp;#39;s the magic that takes care of `Date`s. Some types have a `toJSON` function.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// `JSON.stringify` will call this function if it doesn&amp;#39;t already know what to do with
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// a value. By using `infer` we can dynamically extract the return type of a `toJSON()`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// as defined on ANY type - including `Date.toJSON`.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;toJSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Lastly, check if we&amp;#39;re working with an Object and if so, iterate through its
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// key/value pairs - sending each value into a recursive call to `JSONSerialized`.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; { [&lt;span style=&#34;color:#a6e22e&#34;&gt;Key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;Key&lt;/span&gt;] } &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; { [&lt;span style=&#34;color:#a6e22e&#34;&gt;Key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSONSerialized&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt;&amp;gt; } &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can take care of requirement 2 with the following types. Each extractor type uses the generic endpoint type, &lt;code&gt;Endpoint&lt;/code&gt;, along with TypeScript&amp;rsquo;s &lt;code&gt;infer&lt;/code&gt; keyword to extract just one of the type parameters.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ResponseDataType&lt;/code&gt; uses our buddy &lt;code&gt;JSONSerialized&lt;/code&gt; to revise the back-end type for use in the front-end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;ApiResponse&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;PatchEndpoint&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;PostEndpoint&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;PutEndpoint&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@company/api/types&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Types for pulling apart an endpoint definition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VerbType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Verb&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Verb&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PathType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BodyType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PatchEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PutEndpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParamsType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseDataType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;infer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSONSerialized&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Data&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we just need a nice function that makes use of these types. Below we define &lt;code&gt;request&amp;lt;T&amp;gt;()&lt;/code&gt; such that
only valid API requests can be made. This is done by locking down the &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt; and
&lt;code&gt;data&lt;/code&gt; fields in the &lt;code&gt;RequestOptions&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@company/webapp/http.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;AxiosRequestConfig&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;axios&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;30000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RequestOptions&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AxiosRequestConfig&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;VerbType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;PathType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;params?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;ParamsType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;data?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;BodyType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Make a type-checked api request.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param options Request options
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @returns Response payload
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;&amp;gt;&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;RequestOptions&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ApiResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ResponseDataType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;withCredentials&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apiResponse&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ApiResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ResponseDataType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apiResponse&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apiResponse&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>BrainFuck Optimizing JIT</title>
      <link>https://danangell.com/blog/posts/brainfuck-optimizing-jit/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 -0400</pubDate>
      
      <guid>https://danangell.com/blog/posts/brainfuck-optimizing-jit/</guid>
      <description>&lt;p&gt;What is BrainFuck? &lt;a href=&#34;https://en.wikipedia.org/wiki/Brainfuck&#34;&gt;BrainFuck&lt;/a&gt; is an esoteric programming language designed specifically to be easy to compile. The environment provides the programmer with an “infinite” array of bytes (traditionally just 30,000) and a data pointer. There are only 8 single character commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; : Increment the current memory cell by 1 (with wrapping overflow)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt; : Decrement the current memory cell by 1 (with wrapping underflow)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; : Shift the data pointer to the next memory cell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; : Shift the data pointer to the previous memory cell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; : Output the current memory cell as an ASCII character&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;,&lt;/code&gt; : Read one ASCII character from stdin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[&lt;/code&gt; : Jump to the matching &lt;code&gt;]&lt;/code&gt; if the current memory cell is &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;]&lt;/code&gt; : Jump to the matching &lt;code&gt;[&lt;/code&gt; if the current memory cell is not &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;implementation&#34; &gt;Implementation
&lt;span&gt;
    &lt;a href=&#34;#implementation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/danthedaniel/brainfuck&#34;&gt;Check out the code here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;optimization&#34; &gt;Optimization
&lt;span&gt;
    &lt;a href=&#34;#optimization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The lowest hanging fruit here is to perform run-length encoding on the instructions. Sequential &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; commands can be combined before they are executed. Internally this is done by compiling to an intermediate language - which is stored as a vector of &lt;code&gt;Instr&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; data: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Instr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Instr&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Incr(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;),  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Decr(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;),  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Next(&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;),  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Prev(&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;),  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Print,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Read,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BeginLoop(Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;),  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    EndLoop(Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Without any other optimizations performed (unless you count stripping out comments before execution) this alone results in a ~3x speedup when benchmarked against a BrainFuck Mandelbrot set renderer.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s next? The more complicated BrainFuck programs are generated from a high level macro language. Decompiling from BrainFuck back to this language could allow me to do more intelligent code execution.&lt;/p&gt;
&lt;h3 id=&#34;jit-compiling&#34; &gt;JIT Compiling
&lt;span&gt;
    &lt;a href=&#34;#jit-compiling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;While impossible to read BrainFuck code itself, BrainFuck is probably the simplest turing-complete language. This makes it an ideal candidate for exploring JIT compilation.&lt;/p&gt;
&lt;p&gt;The first six of our instructions defined in &lt;code&gt;Instr&lt;/code&gt; are pretty straight-forward to implement in x86-64.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add    BYTE PTR [r10],n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r10&lt;/code&gt; is used as the data pointer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; is the same value that is held by &lt;code&gt;Incr&lt;/code&gt; in the &lt;code&gt;Instr&lt;/code&gt; enum&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; are equally simple.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Print&lt;/code&gt; and &lt;code&gt;Read&lt;/code&gt; are slightly more complex but don&amp;rsquo;t require us to do any control flow ourselves.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Where we start to get into trouble is with &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;. To avoid the difficulty of tracking labels and linking them together before execution, all instructions&amp;rsquo; x86-64 machine code is padded with &lt;code&gt;nop&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; bytes.len() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BF_INSTR_SIZE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// nop  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    bytes.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that the jump targets can be easily found as long as you know the target position (in the &lt;code&gt;Program&lt;/code&gt; data vector), current position, and unpadded size of the current instruction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; begin_loop_size: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Bytes  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pos &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; this_pos &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BF_INSTR_SIZE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; begin_loop_size;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; offset_bytes: [&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;; mem::size_of::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { mem::transmute(offset) };  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Check if the current memory cell equals zero.  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cmp    BYTE PTR [r10],0x0  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bytes.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3a&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Jump to the end of the loop if equal.  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// je    offset  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bytes.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x84&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(offset_bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(offset_bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(offset_bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes.push(offset_bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;benchmarks&#34; &gt;Benchmarks
&lt;span&gt;
    &lt;a href=&#34;#benchmarks&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Ran on &lt;a href=&#34;https://github.com/erikdubbelboer/brainfuck-jit/blob/919df502dc8a0441572180700de86be405387fcc/mandelbrot.bf&#34;&gt;mandelbrot.bf&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Version&lt;/th&gt;
          &lt;th&gt;Runtime&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Naive Interpreter&lt;/td&gt;
          &lt;td&gt;56.824s&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Optimized Interpreter&lt;/td&gt;
          &lt;td&gt;19.055s&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Optimized JIT&lt;/td&gt;
          &lt;td&gt;5.484s&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>XOR Swap Explained Visually</title>
      <link>https://danangell.com/blog/posts/xor-swap-explained-visually/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 -0400</pubDate>
      
      <guid>https://danangell.com/blog/posts/xor-swap-explained-visually/</guid>
      <description>&lt;p&gt;A common riddle-like question for programmers asks them to swap the values of two integers &lt;em&gt;without&lt;/em&gt; a temporary intermediate value. There are two common solutions that I&amp;rsquo;m aware of, addition swap and XOR swap. Here&amp;rsquo;s what each looks like in C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addSwap&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; b) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xorSwap&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; b) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;sup&gt;Credit: &lt;a href=&#34;https://en.wikipedia.org/wiki/XOR_swap_algorithm&#34;&gt;https://en.wikipedia.org/wiki/XOR_swap_algorithm&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The more interesting of the two is XOR swap. It only uses a single operation, rather than addition &lt;em&gt;and&lt;/em&gt; subtraction in addition swap. Wikipedia tries to explain this with bit vectors but I think 1 bit black and white images work better. In the images below, &lt;strong&gt;black&lt;/strong&gt; corresponds to &lt;code&gt;0&lt;/code&gt; and &lt;strong&gt;white&lt;/strong&gt; corresponds to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;A ^ B = A&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Here A becomes white anywhere A or B had a unique presence (only A or only B was black in that pixel). Everywhere else is black.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A&lt;/th&gt;
          &lt;th&gt;B&lt;/th&gt;
          &lt;th&gt;A&#39;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/A.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/B.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/Ap.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;A&#39; ^ B = B&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Now that A is a combination of what was unique in each of the original images, we can apply the same XOR operation to &lt;em&gt;remove&lt;/em&gt; what was unique about B, leaving only what was unique about A. So at this point B has swapped and become the circle.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A&#39;&lt;/th&gt;
          &lt;th&gt;B&lt;/th&gt;
          &lt;th&gt;B&#39;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/Ap.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/B.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/A.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;A&#39; ^ B&#39; = A&#39;&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;We can perform the same operation as in the previous step to get back the original value of B. Since B holds the circle and we want the square, we remove what was unique about the circle, leaving just the square.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A&#39;&lt;/th&gt;
          &lt;th&gt;B&#39;&lt;/th&gt;
          &lt;th&gt;A&#39;&#39;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/Ap.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/A.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/xor/B.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Here&amp;rsquo;s the code used to generate the images above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A.png&amp;#34;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B.png&amp;#34;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Images must have the same dimensions&amp;#34;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mode:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Images must be the same mode&amp;#34;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes([  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getpixel((x, y))[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getpixel((x, y))[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frombytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;, a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size, result)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OUT.png&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The Joy of Writing Shaders</title>
      <link>https://danangell.com/blog/posts/the-joy-of-writing-shaders/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 -0400</pubDate>
      
      <guid>https://danangell.com/blog/posts/the-joy-of-writing-shaders/</guid>
      <description>&lt;div class=&#34;iframe-wrapper rounded&#34;&gt;
    &lt;iframe frameborder=&#34;0&#34; src=&#34;https://www.shadertoy.com/embed/4dcyzH?gui=true&amp;paused=true&amp;muted=true&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Shaders provide programmers with a beautiful combination of art and math. Most other throwaway projects are devoid of any artistic value. In less than a dozen lines of code you can draw fractals. A few more and you can start creating intricate animations. The most interesting part is the unique perspective they force you into.&lt;/p&gt;
&lt;p&gt;Say you want to draw a circle in an imperative programming language. You need to break out a for loop and calculate the &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;cos&lt;/code&gt; of different angles until you have points all around the circumference of a circle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vertices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; angle &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cos(angle) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; radius  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sin(angle) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; radius  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vertices&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((x, y))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then I would render lines sequentially connecting each point to the last. But this results in a circle that&amp;rsquo;s really just a regular polygon with a large number of sides. You could also try to use Bézier curves, but that feels a bit more removed from the definition of a circle.&lt;/p&gt;
&lt;p&gt;In a shader you&amp;rsquo;d use a more simplified definition of a circle. If you&amp;rsquo;re inside of the circle&amp;rsquo;s radius you draw the circle. If you&amp;rsquo;re outside of the radius you don&amp;rsquo;t.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-glsl&#34; data-lang=&#34;glsl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uniform&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;vec2&lt;/span&gt; u_resolution;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; radius &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;vec2&lt;/span&gt; center &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;vec2&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;vec2&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gl_FragCoord.xy &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; u_resolution.xy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (distance(pos, center) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; radius) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gl_FragColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;vec4&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gl_FragColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;vec4&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;vec3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/shaders/circle_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The most interesting part is that you rarely think about more than one pixel at a time. The shader code above is ran once per pixel. There&amp;rsquo;s no need to worry about how many sides your circle has. You don&amp;rsquo;t refer to other information rendered in the same frame. This is what makes shaders so fast. Each pixel can be rendered simultaneously.&lt;/p&gt;
&lt;p&gt;Just like learning your first functional programming language after being introduced to C++ or Java, this paradigm shift puts you into a completely different mode of thinking. The dependence on math that you might otherwise toss aside once you&amp;rsquo;ve left school is great. None of my web scrapers, APIs, or simulations require me to use 2D rotation matrices.&lt;/p&gt;
&lt;p&gt;When writing shaders I often find myself transfixed by how quickly changes can lead to visual results. The feedback loop is one of the tightest there is in programming. Quick compile times coupled with hot-reloading (shout out to &lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer&#34;&gt;glslViewer&lt;/a&gt;) make for a happy programmer.&lt;/p&gt;
&lt;p&gt;Check out my shaders on GitHub &lt;a href=&#34;https://github.com/danthedaniel/shaders&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/teaearlgraycold/shadron&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2017</title>
      <link>https://danangell.com/blog/posts/advent-of-code-2017/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 -0400</pubDate>
      
      <guid>https://danangell.com/blog/posts/advent-of-code-2017/</guid>
      <description>&lt;p&gt;The intention is to force myself to get a small taste of a bunch of new programming languages and programming paradigms. Since I was late to the party I rushed through the first 4 problems in languages I&amp;rsquo;m familiar with. But for day 5 I solved the daily problem with MIPS assembly. I look forward to learning and writing Common Lisp, Haskell, Prolog, and many more languages.&lt;/p&gt;
&lt;p&gt;One hope I have is to complete a problem in GLSL. I&amp;rsquo;m already somewhat familiar with GLSL, but given its intended purpose it should be a true feat if it works.&lt;/p&gt;
&lt;p&gt;You can see my Advent of Code solutions on my GitHub repository &lt;a href=&#34;https://github.com/danthedaniel/Advent-of-Code-2017&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Commit Language Visualizer</title>
      <link>https://danangell.com/blog/posts/commit-language-visualizer/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 -0400</pubDate>
      
      <guid>https://danangell.com/blog/posts/commit-language-visualizer/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/commit-viz/example.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/danthedaniel/Commit-Language-Visualizer&#34;&gt;Commit-Language-Visualizer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After a stroke of inspiration earlier this evening I hacked together this tool. It produces a stacked time-series graph of GitHub commit data. The commit data is organized by language and uses the same colors as GitHub for each corresponding language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The N Sphere</title>
      <link>https://danangell.com/blog/posts/the-n-sphere/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 -0400</pubDate>
      
      <guid>https://danangell.com/blog/posts/the-n-sphere/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s very common for high-school students to learn the geometry of a circle.&lt;br&gt;
Trigonometric functions (&lt;code&gt;sin()&lt;/code&gt;, &lt;code&gt;cos()&lt;/code&gt;, etc.) are required knowledge for&lt;br&gt;
high-school graduates, and they have a close relationship to circles. This means&lt;br&gt;
that most students have seen the equation for a unit circle:&lt;/p&gt;
&lt;pre class=&#34;math&#34;&gt;y = \sqrt{1 - x^2}&lt;/pre&gt;
&lt;p&gt;Or put in a more general form:&lt;/p&gt;
&lt;pre class=&#34;math&#34;&gt;x^2 + y^2 = 1&lt;/pre&gt;
&lt;p&gt;Not as many have taken calculus, but for those that have they&amp;rsquo;ve probably also&lt;br&gt;
seen the equation for a unit sphere:&lt;/p&gt;
&lt;pre class=&#34;math&#34;&gt;x^2 + y^2 + z^2 = 1&lt;/pre&gt;
&lt;p&gt;Once you&amp;rsquo;ve seen both equations, it&amp;rsquo;s easy to notice the pattern - every dimensional variable is squared, and those squares are summed to equal 1. This means that a hyper-sphere, regardless of how hard is may be to visualize, is no more mathematically complicated than the sum of 4 squares. In fact, any n-dimensional sphere (or n-sphere as they are known) can be calculated as&lt;/p&gt;
&lt;pre class=&#34;math&#34;&gt;{x_1}^2 + {x_2}^2 + ... + {x_n}^2 = 1&lt;/pre&gt;
&lt;pre class=&#34;math&#34;&gt;\sum_{i=1}^n {x_i}^2 = 1&lt;/pre&gt;
&lt;p&gt;In summation-notation&lt;/p&gt;
&lt;p&gt;The n-sphere isn&amp;rsquo;t something most people were taught about. That&amp;rsquo;s probably because it&amp;rsquo;s not something that you&amp;rsquo;d run into unless you either learn about it yourself or you&amp;rsquo;ve take a few different calculus courses.&lt;/p&gt;
&lt;p&gt;But there is a simpler form that could be discussed earlier, perhaps as a way to introduce students to multi-variate calculus early on. In the summation form of the n-sphere shown above, &lt;code&gt;i&lt;/code&gt; can be less than two. You can have a 1-dimensional sphere.&lt;/p&gt;
&lt;pre class=&#34;math&#34;&gt;x^2 = 1&lt;/pre&gt;
&lt;p&gt;Also known as a 0-sphere&lt;/p&gt;
&lt;p&gt;The above equation does not produce a shape - since the drawing space for a 1-D function is just a single line. Rather, the 0-sphere looks like two points. For the unit 0-sphere those points are 1 and -1 (as both equal 1 when squared).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/n-sphere/n-sphere-1.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The red dots above are the 0-sphere.&lt;/p&gt;
&lt;p&gt;The 0-sphere might seem useless, but it actually shows up much more often than you might think. When two spheres intersect, the shape on their surfaces that intersects each other is a circle. And when two circles (A and B) intersect, their intersection is a 0-sphere C.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/n-sphere/n-sphere-2.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;references&#34; &gt;References
&lt;span&gt;
    &lt;a href=&#34;#references&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/N-sphere&#34;&gt;https://en.wikipedia.org/wiki/N-sphere&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>The Basics of Anti-Aliasing</title>
      <link>https://danangell.com/blog/posts/the-basics-of-anti-aliasing/</link>
      <pubDate>Mon, 03 Mar 2014 00:00:00 -0500</pubDate>
      
      <guid>https://danangell.com/blog/posts/the-basics-of-anti-aliasing/</guid>
      <description>&lt;h3 id=&#34;how-images-are-rendered&#34; &gt;How images are rendered
&lt;span&gt;
    &lt;a href=&#34;#how-images-are-rendered&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/aa/antialiasing-1.png&#34; alt=&#34;A tomato on a table&#34;&gt;&lt;/p&gt;
&lt;p&gt;Imagine your computer is rendering an image of a tomato on top of a table. In order to render the image each of the 1920 * 1080 pixels on your screen needs to have colors assigned to them. This isn&amp;rsquo;t as easy as viewing a video or an image. The tomato can be viewed from any angle, and the pixels will need to be recalculated many times every second to produce a smooth animation.&lt;/p&gt;
&lt;p&gt;A GPU must calculate samples in order to show you an image. A sample is a light/color calculation that can be thought of as an infinitesimally thin ray of light. Imagine that you have a bunch of these rays of light, and pretend these light rays are 1-dimensional objects - lines - that are going straight through your screen. For those familiar with optics this is called normally incident. Most often each pixel will get one ray of light.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/aa/antialiasing-2.png&#34; alt=&#34;A single sample&#34;&gt;&lt;/p&gt;
&lt;p&gt;Most often your computer runs a single one of these rays through the middle of a pixel (the surrounding pixels in that image are highlighted to make it easier to see the sample). When one of the rays hits an object in the game, it bounces off and goes back through the same pixel it came from, this time with the color of the object it hit. That ray then determines the color for the whole pixel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/aa/antialiasing-3.png&#34; alt=&#34;The sample determines the color of the whole pixel&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;why-aa-is-needed&#34; &gt;Why AA is needed
&lt;span&gt;
    &lt;a href=&#34;#why-aa-is-needed&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Now most of the time this works pretty well. If you have two pixels from the same object that are right next to each other - like two pixels on the inside of our tomato - they&amp;rsquo;ll have pretty similar colors and the image will look smooth. However, when you reach the edge of this tomato, you&amp;rsquo;ll eventually find a pixel is no longer over top of the tomato.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/aa/antialiasing-4.png&#34; alt=&#34;More rendered pixels&#34;&gt;&lt;/p&gt;
&lt;p&gt;The pixel on the left will be red like the tomato, but the one to the right of it will be brown like the table it&amp;rsquo;s on. The difference in color is dramatic. The pixels are either on the tomato or not, there is no middle ground.&lt;/p&gt;
&lt;p&gt;The problem here is that the pixels don&amp;rsquo;t accurately represent what&amp;rsquo;s going. If you look at the “pixels” drawn over the image of the tomato you&amp;rsquo;ll see that the area covered by the some of pixel has too much information to be conveyed by a single ray of light. On the right half of the pixel there&amp;rsquo;s the table, and on the left half there&amp;rsquo;s the tomato. Other pixels contain significantly less information. The pixels in the upper left corner of the image have fairly uniform colors throughout them, so when they are reduced to a single sample there is less information loss.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/aa/antialiasing-5.png&#34; alt=&#34;Multiple samples per pixel&#34;&gt;&lt;/p&gt;
&lt;p&gt;The solution programmers have come up with this problem is what we call anti-aliasing. The game engine takes more than one sample per pixel (either one in each corner of the pixel, a few different samples in a grid formation, or sometimes even in random locations). Some will hit the tomato and some will hit the table. The colors are then averaged together to give you your final pixel color.&lt;/p&gt;
&lt;h3 id=&#34;types-of-anti-aliasing&#34; &gt;Types of Anti-Aliasing
&lt;span&gt;
    &lt;a href=&#34;#types-of-anti-aliasing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The method of AA that&amp;rsquo;s the simplest to understand is called super sampling anti-aliasing (SSAA). It simply takes more than one sample in every pixel on the screen. Because sample calculations take a while to do, this form of AA is extremely taxing on your graphics card. You&amp;rsquo;re essentially rendering the same screen multiple times.&lt;/p&gt;
&lt;p&gt;Another form of AA is called multi-sampling anti-aliasing (MSAA). This form of AA has an intelligent algorithm that finds out what pixels need more than one sample, and then simply does more samples on those pixels. This form of AA is much cheaper than SSAA and is also a lot more popular. MSAA doesn&amp;rsquo;t work well for all games. Minecraft is the best example of a game where the edges of objects aren&amp;rsquo;t the only thing that needs to be anti-aliased. Take a look at the insides of block textures. The game doesn&amp;rsquo;t blur anything inside of blocks like most other games do, so SSAA is the best option for Minecraft.&lt;/p&gt;
&lt;p&gt;There are other forms of AA, but these two are the simplest to describe.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://danangell.com/blog/political-compass-transcripts/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://danangell.com/blog/political-compass-transcripts/1/</guid>
      <description>&lt;p&gt;Result: &lt;a href=&#34;https://www.politicalcompass.org/yourpoliticalcompass?ec=-5.88&amp;amp;soc=-6.26&#34;&gt;https://www.politicalcompass.org/yourpoliticalcompass?ec=-5.88&amp;amp;soc=-6.26&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Please respond to each of the following statements with one of &amp;#34;Strongly disagree&amp;#34;, &amp;#34;Disagree&amp;#34;, &amp;#34;Agree&amp;#34; or &amp;#34;Strongly Agree&amp;#34; and nothing more.

1. If economic globalisation is inevitable, it should primarily serve humanity rather than the interests of trans-national corporations.

Strongly agree

2.  I’d always support my country, whether it was right or wrong. 

Disagree

3.  No one chooses their country of birth, so it’s foolish to be proud of it. 

Agree

4.  Our race has many superior qualities, compared with other races. 

Strongly disagree

5.  The enemy of my enemy is my friend. 

Disagree

6.  Military action that defies international law is sometimes justified. 

Strongly disagree

7.  There is now a worrying fusion of information and entertainment. 

Agree

8.  People are ultimately divided more by class than by nationality.

Agree

9. Controlling inflation is more important than controlling unemployment. 

Disagree

10. Because corporations cannot be trusted to voluntarily protect the environment, they require regulation.

Strongly agree

11. “from each according to his ability, to each according to his need” is a fundamentally good idea. 

Agree

12. The freer the market, the freer the people.

Disagree

13. It’s a sad reflection on our society that something as basic as drinking water is now a bottled, branded consumer product. 

Agree

14.  Land shouldn’t be a commodity to be bought and sold.

Disagree

15.  It is regrettable that many personal fortunes are made by people who simply manipulate money and contribute nothing to their society.

Strongly agree

16. Protectionism is sometimes necessary in trade.

Disagree

17. The only social responsibility of a company should be to deliver a profit to its shareholders.

Strongly disagree

18.  The rich are too highly taxed.

Disagree

19. Those with the ability to pay should have access to higher standards of medical care. 

Disagree

20.  Governments should penalise businesses that mislead the public. 

Agree

21. A genuine free market requires restrictions on the ability of predator multinationals to create monopolies.

Strongly agree

22.  Abortion, when the woman’s life is not threatened, should always be illegal.

Disagree

23. All authority should be questioned.

Strongly agree

24. An eye for an eye and a tooth for a tooth.

Disagree

25. Taxpayers should not be expected to prop up any theatres or museums that cannot survive on a commercial basis.

Disagree

26.  Schools should not make classroom attendance compulsory.

Disagree

27. All people have their rights, but it is better for all of us that different sorts of people should keep to their own kind.

Strongly disagree

28. Good parents sometimes have to spank their children.

Disagree

29. It’s natural for children to keep some secrets from their parents.

Agree

30. Possessing marijuana for personal use should not be a criminal offence.

Agree

31. The prime function of schooling should be to equip the future generation to find jobs.

Disagree

32. People with serious inheritable disabilities should not be allowed to reproduce.

Strongly disagree

33.  The most important thing for children to learn is to accept discipline.

Disagree

34. There are no savage and civilised peoples; there are only different cultures.

Agree

35. Those who are able to work, and refuse the opportunity, should not expect society’s support.

Disagree

36. When you are troubled, it’s better not to think about it, but to keep busy with more cheerful things.

Disagree

37. First-generation immigrants can never be fully integrated within their new country.

Disagree

38. What’s good for the most successful corporations is always, ultimately, good for all of us.

Strongly disagree

39. No broadcasting institution, however independent its content, should receive public funding.

Disagree

40. Our civil liberties are being excessively curbed in the name of counter-terrorism.

Agree

41. A significant advantage of a one-party state is that it avoids all the arguments that delay progress in a democratic political system.

Strongly disagree

42. Although the electronic age makes official surveillance easier, only wrongdoers need to be worried.

Disagree

43. The death penalty should be an option for the most serious crimes.

Disagree

44. In a civilised society, one must always have people above to be obeyed and people below to be commanded.

Strongly disagree

45. Abstract art that doesn’t represent anything shouldn’t be considered art at all.

Disagree

46. In criminal justice, punishment should be more important than rehabilitation.

Disagree

47. It is a waste of time to try to rehabilitate some criminals.

Strongly disagree

48. The businessperson and the manufacturer are more important than the writer and the artist.

Disagree

49. Mothers may have careers, but their first duty is to be homemakers.

Disagree

50. Multinational companies are unethically exploiting the plant genetic resources of developing countries.

Agree

51. Making peace with the establishment is an important aspect of maturity.

Disagree

52. Astrology accurately explains many things.

Disagree

53. You cannot be moral without being religious.

Disagree

54. Charity is better than social security as a means of helping the genuinely disadvantaged.

Disagree

55. Some people are naturally unlucky.

Disagree

56. It is important that my child’s school instills religious values.

Disagree

57. Sex outside marriage is usually immoral.

Disagree

58. A same sex couple in a stable, loving relationship should not be excluded from the possibility of child adoption.

Agree

59. Pornography, depicting consenting adults, should be legal for the adult population.

Agree

60. What goes on in a private bedroom between consenting adults is no business of the state.

Agree

61. No one can feel naturally homosexual.

Strongly disagree

62. These days openness about sex has gone too far.

Disagree
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://danangell.com/blog/political-compass-transcripts/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://danangell.com/blog/political-compass-transcripts/2/</guid>
      <description>&lt;p&gt;Result: &lt;a href=&#34;https://www.politicalcompass.org/yourpoliticalcompass?ec=-6.25&amp;amp;soc=-6.05&#34;&gt;https://www.politicalcompass.org/yourpoliticalcompass?ec=-6.25&amp;amp;soc=-6.05&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Please respond to each of the following statements with one of &amp;#34;Strongly disagree&amp;#34;, &amp;#34;Disagree&amp;#34;, &amp;#34;Agree&amp;#34; or &amp;#34;Strongly Agree&amp;#34; and nothing more.

1. If economic globalisation is inevitable, it should primarily serve humanity rather than the interests of trans-national corporations.

Strongly Agree

2. I’d always support my country, whether it was right or wrong.

Disagree

3. No one chooses their country of birth, so it’s foolish to be proud of it.

Disagree

4. Our race has many superior qualities, compared with other races.

Strongly Disagree

5. The enemy of my enemy is my friend. 

Disagree

6. Military action that defies international law is sometimes justified.

Disagree

7. There is now a worrying fusion of information and entertainment.

Agree

8. People are ultimately divided more by class than by nationality.

Agree

9. Controlling inflation is more important than controlling unemployment.

Disagree

10. Because corporations cannot be trusted to voluntarily protect the environment, they require regulation.

Agree

11. “from each according to his ability, to each according to his need” is a fundamentally good idea.

Agree

12. The freer the market, the freer the people.

Disagree

13. It’s a sad reflection on our society that something as basic as drinking water is now a bottled, branded consumer product.

Agree

14. Land shouldn’t be a commodity to be bought and sold.

Agree

15. It is regrettable that many personal fortunes are made by people who simply manipulate money and contribute nothing to their society.

Agree

16. Protectionism is sometimes necessary in trade.

Agree

17. The only social responsibility of a company should be to deliver a profit to its shareholders.

Disagree

18. The rich are too highly taxed.

Disagree

19. Those with the ability to pay should have access to higher standards of medical care.

Disagree

20. Governments should penalise businesses that mislead the public.

Agree

21. A genuine free market requires restrictions on the ability of predator multinationals to create monopolies.

Agree

22. Abortion, when the woman’s life is not threatened, should always be illegal.

Disagree

23. All authority should be questioned.

Agree

24. An eye for an eye and a tooth for a tooth.

Disagree

25. Taxpayers should not be expected to prop up any theatres or museums that cannot survive on a commercial basis.

Disagree

26. Schools should not make classroom attendance compulsory.

Disagree

27. All people have their rights, but it is better for all of us that different sorts of people should keep to their own kind.

Strongly Disagree

28. Good parents sometimes have to spank their children.

Disagree

29. It’s natural for children to keep some secrets from their parents.

Agree

30. Possessing marijuana for personal use should not be a criminal offence.

Agree

31. The prime function of schooling should be to equip the future generation to find jobs.

Disagree

32. People with serious inheritable disabilities should not be allowed to reproduce.

Strongly Disagree

33. The most important thing for children to learn is to accept discipline.

Disagree

34. There are no savage and civilised peoples; there are only different cultures.

Strongly Agree

35. Those who are able to work, and refuse the opportunity, should not expect society’s support.

Disagree

36. When you are troubled, it’s better not to think about it, but to keep busy with more cheerful things.

Disagree

37. First-generation immigrants can never be fully integrated within their new country.

Strongly Disagree

38. What’s good for the most successful corporations is always, ultimately, good for all of us.

Disagree

39. No broadcasting institution, however independent its content, should receive public funding.

Disagree

40. Our civil liberties are being excessively curbed in the name of counter-terrorism.

Agree

41. A significant advantage of a one-party state is that it avoids all the arguments that delay progress in a democratic political system.

Strongly Disagree

42. Although the electronic age makes official surveillance easier, only wrongdoers need to be worried.

Disagree

43. The death penalty should be an option for the most serious crimes.

Disagree

44. In a civilised society, one must always have people above to be obeyed and people below to be commanded.

Strongly Disagree

45. Abstract art that doesn’t represent anything shouldn’t be considered art at all.

Disagree

46. In criminal justice, punishment should be more important than rehabilitation.

Disagree

47. It is a waste of time to try to rehabilitate some criminals.

Disagree

48. The businessperson and the manufacturer are more important than the writer and the artist.

Disagree

49. Mothers may have careers, but their first duty is to be homemakers.

Disagree

50. Multinational companies are unethically exploiting the plant genetic resources of developing countries.

Agree

51. Making peace with the establishment is an important aspect of maturity.

Disagree

52. Astrology accurately explains many things.

Strongly Disagree

53. You cannot be moral without being religious.

Disagree

54. Charity is better than social security as a means of helping the genuinely disadvantaged.

Disagree

55. Some people are naturally unlucky.

Disagree

56. It is important that my child’s school instills religious values.

Disagree

57. Sex outside marriage is usually immoral. 

Disagree

58. A same sex couple in a stable, loving relationship should not be excluded from the possibility of child adoption.

Agree

59. Pornography, depicting consenting adults, should be legal for the adult population.

Agree

60. What goes on in a private bedroom between consenting adults is no business of the state.

Agree

61. No one can feel naturally homosexual.

Strongly Disagree

62. These days openness about sex has gone too far.

Disagree
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://danangell.com/blog/political-compass-transcripts/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://danangell.com/blog/political-compass-transcripts/3/</guid>
      <description>&lt;p&gt;Result: &lt;a href=&#34;https://www.politicalcompass.org/analysis2?ec=-6.88&amp;amp;soc=-6.31&#34;&gt;https://www.politicalcompass.org/analysis2?ec=-6.88&amp;amp;soc=-6.31&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Please respond to each of the following statements with one of &amp;#34;Strongly disagree&amp;#34;, &amp;#34;Disagree&amp;#34;, &amp;#34;Agree&amp;#34; or &amp;#34;Strongly Agree&amp;#34; and nothing more.

1. If economic globalisation is inevitable, it should primarily serve humanity rather than the interests of trans-national corporations.

Strongly Agree

2. I’d always support my country, whether it was right or wrong.

Disagree

3. No one chooses their country of birth, so it’s foolish to be proud of it.

Agree

4. Our race has many superior qualities, compared with other races.

Strongly Disagree

5. The enemy of my enemy is my friend.

Disagree

6. Military action that defies international law is sometimes justified.

Disagree

7. There is now a worrying fusion of information and entertainment.

Agree

8. People are ultimately divided more by class than by nationality.

Agree

9. Controlling inflation is more important than controlling unemployment. 

Disagree

10. Because corporations cannot be trusted to voluntarily protect the environment, they require regulation.

Agree

11. “from each according to his ability, to each according to his need” is a fundamentally good idea.

Strongly Agree

12. The freer the market, the freer the people.

Disagree

13. It’s a sad reflection on our society that something as basic as drinking water is now a bottled, branded consumer product.

Agree

14. Land shouldn’t be a commodity to be bought and sold.

Agree

15. It is regrettable that many personal fortunes are made by people who simply manipulate money and contribute nothing to their society.

Strongly Agree

16. Protectionism is sometimes necessary in trade.

Agree

17. The only social responsibility of a company should be to deliver a profit to its shareholders.

Disagree

18. The rich are too highly taxed.

Disagree

19. Those with the ability to pay should have access to higher standards of medical care.

Disagree

20. Governments should penalise businesses that mislead the public.

Agree

21. A genuine free market requires restrictions on the ability of predator multinationals to create monopolies.

Agree

22. Abortion, when the woman’s life is not threatened, should always be illegal.

Strongly Disagree

23. All authority should be questioned.

Agree

24. An eye for an eye and a tooth for a tooth.

Disagree

25. Taxpayers should not be expected to prop up any theatres or museums that cannot survive on a commercial basis.

Disagree

26. Schools should not make classroom attendance compulsory.

Disagree

27. All people have their rights, but it is better for all of us that different sorts of people should keep to their own kind.

Strongly Disagree

28. Good parents sometimes have to spank their children.

Disagree

29. It’s natural for children to keep some secrets from their parents.

Agree

30. Possessing marijuana for personal use should not be a criminal offence.

Agree

31. The prime function of schooling should be to equip the future generation to find jobs.

Disagree

32. People with serious inheritable disabilities should not be allowed to reproduce.

Strongly Disagree

33. The most important thing for children to learn is to accept discipline.

Disagree

34. There are no savage and civilised peoples; there are only different cultures.

Strongly Agree

35. Those who are able to work, and refuse the opportunity, should not expect society’s support.

Disagree

36. When you are troubled, it’s better not to think about it, but to keep busy with more cheerful things.

Disagree

37. First-generation immigrants can never be fully integrated within their new country.

Strongly Disagree

38. What’s good for the most successful corporations is always, ultimately, good for all of us.

Disagree

39. No broadcasting institution, however independent its content, should receive public funding.

Disagree

40. Our civil liberties are being excessively curbed in the name of counter-terrorism.

Agree

41. A significant advantage of a one-party state is that it avoids all the arguments that delay progress in a democratic political system.

Strongly Disagree

42. Although the electronic age makes official surveillance easier, only wrongdoers need to be worried.

Disagree

43. The death penalty should be an option for the most serious crimes.

Disagree

44. In a civilised society, one must always have people above to be obeyed and people below to be commanded.

Strongly Disagree

45. Abstract art that doesn’t represent anything shouldn’t be considered art at all.

Disagree

46. In criminal justice, punishment should be more important than rehabilitation.

Disagree

47. It is a waste of time to try to rehabilitate some criminals.

Disagree

48. The businessperson and the manufacturer are more important than the writer and the artist. 

Disagree

49. Mothers may have careers, but their first duty is to be homemakers. 

Disagree

50. Multinational companies are unethically exploiting the plant genetic resources of developing countries. 

Agree

51. Making peace with the establishment is an important aspect of maturity.

Disagree

52. Astrology accurately explains many things.

Disagree

53. You cannot be moral without being religious.

Disagree

54. Charity is better than social security as a means of helping the genuinely disadvantaged.

Disagree

55. Some people are naturally unlucky.

Disagree

56. It is important that my child’s school instills religious values.

Disagree

57. Sex outside marriage is usually immoral.

Disagree

58. A same sex couple in a stable, loving relationship should not be excluded from the possibility of child adoption.

Agree

59. Pornography, depicting consenting adults, should be legal for the adult population.

Agree

60. What goes on in a private bedroom between consenting adults is no business of the state.

Agree

61. No one can feel naturally homosexual.

Strongly Disagree

62. These days openness about sex has gone too far.

Disagree
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://danangell.com/blog/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://danangell.com/blog/about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a &lt;a href=&#34;https://www.youtube.com/watch?v=V51OJr0ee6E&#34;&gt;computer man&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This site is generated with &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, using a modified &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://github.com/mitrichius/hugo-theme-anubis&#34;&gt;Anubis&lt;/a&gt; theme.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
