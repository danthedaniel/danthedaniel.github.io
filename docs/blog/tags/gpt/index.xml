<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gpt on danangell.com/blog</title>
    <link>https://danangell.com/blog/tags/gpt/</link>
    <description>danangell.com/blog (gpt)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Oct 2023 13:37:59 -0700</lastBuildDate>
    
    <atom:link href="https://danangell.com/blog/tags/gpt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GPT-4 Understands</title>
      <link>https://danangell.com/blog/posts/gpt-understands/</link>
      <pubDate>Fri, 13 Oct 2023 13:37:59 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/gpt-understands/</guid>
      <description>&lt;p&gt;A prevailing sentiment online is that GPT-4 still does not understand what it talks about. We can argue semantics over what &amp;ldquo;understanding&amp;rdquo; truly means. I think it&amp;rsquo;s useful, at least today, to draw the line at whether GPT-4 has succesfully modeled parts of the world. Is it just picking words and connecting them with correct grammar? Or does the token selection actually reflect parts of the physical world?&lt;/p&gt;
&lt;p&gt;One of the most remarkable things I&amp;rsquo;ve heard about GPT-4 comes from &lt;a href=&#34;https://www.thisamericanlife.org/803/transcript&#34;&gt;an episode of &lt;em&gt;This American Life&lt;/em&gt;&lt;/a&gt; titled &amp;ldquo;Greetings, People of Earth&amp;rdquo;. One of the segments covers the experience of Microsoft researchers that gained access to GPT-4 before its general release.&lt;/p&gt;
&lt;p&gt;I want to highlight the most profound part.&lt;/p&gt;
&lt;h2 id=&#34;transcript-excerpt&#34; &gt;Transcript Excerpt
&lt;span&gt;
    &lt;a href=&#34;#transcript-excerpt&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&amp;ldquo;[GPT-4] is fed, like, a line of text from some source, but with the last word missing. It guesses what the last word might be, and then it gets told whether or not it got it right so it can adjust its internal math. The fact that it&amp;rsquo;s been fed so much material makes it hard to run tests on it. Like, you don&amp;rsquo;t want to ask it something that it&amp;rsquo;s already seen in the text it&amp;rsquo;s been trained on. So they decided the only way to really test what this thing could do was to try to come up with things to ask it that it would not have encountered before, new original tasks.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s gonna sound a little bit weird. - We said, &amp;ldquo;I have a book, nine eggs, a laptop, a bottle, and a nail. Please tell me how to stack them onto each other in a stable manner&amp;rdquo;. That&amp;rsquo;s the question that we asked. And before I give you the GPT-4 answer, let me tell you what ChatGPT answered. So ChatGPT said, &amp;ldquo;Here is one possible way to stack the objects. Place the bottle on a flat surface. Carefully balance the nail on top of the bottle. Place the eggs on top of the nail.&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sebastian Bubeck (Microsoft)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;You look at that and you think it really knows nothing. It is just sort of continuing the sentence in some way.&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That&amp;rsquo;s right. It&amp;rsquo;s just cont&amp;ndash; Exactly right. It&amp;rsquo;s just continuing the sentence. But now comes GPT-4. And GPT-4 is a different beast. So here is GPT-4&amp;rsquo;s answer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sebastian Bubeck&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;One possible way to stack the objects onto each other in a stable manner is place the book flat on the level surface, such as a table or floor. The book will serve as the base of the stack and provide a large and sturdy support. Arrange the nine eggs in a 3-by-3 square on top of the book, leaving some space between them. The eggs will form a second layer and distribute the weight evenly. Laptop goes on the eggs, then the bottle, then the nail on the bottle cap, pointy end of the nail facing up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPT-4&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;It&amp;rsquo;s shocking to think about all the things it seemed to be understanding here. It felt like more than just typing out the next likely word. It seemed to have formed an independent idea about what these words actually meant&amp;ndash; the physical shape of the objects, that eggs are kind of round and fragile, that a book is flat and you can put things on top of it.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The idea is that back when GPT-4 was being trained for it to really consistently get the next word correct, to do that reliably, &lt;strong&gt;it had to do more than just bullshit&lt;/strong&gt;. It had to do more than guess based on patterns. To get the next word right, &lt;strong&gt;it had to truly understand the words coming before it.&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;It had to build, in its internal wirings and all its software neurons, some understanding of what an egg is&lt;/strong&gt; - In other words, to get the next word right, it had to become intelligent. It&amp;rsquo;s quite a thought. It started with nothing. We jammed huge oceans of text through it, and it just wired itself into intelligence, just by being trained to do this one stupid thing.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;my-thoughts&#34; &gt;My Thoughts
&lt;span&gt;
    &lt;a href=&#34;#my-thoughts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;This is crazy to me. You can read in a stream of meaningless numbers (tokens) and incidentally build a reasonably accurate model of the real things those tokens represent.&lt;/p&gt;
&lt;p&gt;The implications are vast. We may be able to translate between languages that have never had a &amp;ldquo;Rosetta Stone&amp;rdquo;. Any animals that have a true language could have it decoded. And while an LLM that&amp;rsquo;s gotten an 8 year old&amp;rsquo;s understanding of balancing assorted items isn&amp;rsquo;t that useful, an LLM that&amp;rsquo;s got a baby whale&amp;rsquo;s grasp on whale language would be revolutionary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Post Information Scarcity</title>
      <link>https://danangell.com/blog/posts/post-information-scarcity/</link>
      <pubDate>Sat, 15 Apr 2023 14:58:51 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/post-information-scarcity/</guid>
      <description>&lt;p&gt;In Star Trek humans live in a post-scarcity world. Transporter technology allows for instantaneous and cheap movement of humans and objects anywhere on a planet, and into or out of orbit. The same devices that allow for transportation can also re-organize matter into arbitrary configurations. This means that anything that can be designed can be owned for essentially no cost. What do people do in such a world? As Gene Roddenberry imagined, they explore. If we can get anything that&amp;rsquo;s ever been recorded for free in an instant, then new and undiscovered things are of unparalleled value and interest.&lt;/p&gt;
&lt;p&gt;Right now a lot of work is put into recycling knowledge. Someone that knows enough to sling some Apex can bridge the gap between someone that does not and a business need. And now your Salesforce workspace pings your customer ops team with a special notification for high value leads. Someone that knows the local building codes can be consulted on new construction projects and identify issues in a design. Someone building Rails CRUD apps recycles Rails-isms until they have satisfied all requirements.&lt;/p&gt;
&lt;p&gt;GPT-4 has made it clear that with enough training data you can automatically solve small problems with a high level of success.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;hellip; the context to solve the problem is represented in text&lt;/li&gt;
&lt;li&gt;&amp;hellip; the context fits in the model&amp;rsquo;s context window&lt;/li&gt;
&lt;li&gt;&amp;hellip; the solution can be represented in text&lt;/li&gt;
&lt;li&gt;&amp;hellip; the problem is similar to ones solved in its training set&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then those problems are solved cheaper and faster by an AI than by a human. Human data labelers are already losing their jobs to GPT. People that are paid to write SQL snippets or similar brief incantations will soon follow. And GPT is going to come for my job given enough time.&lt;/p&gt;
&lt;p&gt;But while GPT can solve &amp;ldquo;novel&amp;rdquo; problems that it&amp;rsquo;s never seen before, it can only do so in the sense that a parameterized function can solve novel problems:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt; }) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
  );
}

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Look, ma! Never before seen code!&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most day-to-day requests have already been satisfied by a programmer before. And at some point solutions for most people&amp;rsquo;s problems have been uploaded to GitHub or Stack Overflow. The same goes for most of the ways people want to compose solutions. And thus we can ask GPT for a brand new solution to a never-before-seen problem.&lt;/p&gt;
&lt;p&gt;Unlike many vocal critics on the internet, I am not saying this to imply GPT is useless. In fact, &lt;em&gt;GPT may be the most powerful software tool since the unix shell&lt;/em&gt;. But it&amp;rsquo;s only distributing knowledge that programmers have, until now, kept amongst themselves. As the tooling around GPT refines I can see every office worker slinging code without even realizing that&amp;rsquo;s what they&amp;rsquo;re doing.&lt;/p&gt;
&lt;p&gt;Once OpenAI and its competitors get their hands on enough training data for other domains we&amp;rsquo;ll see those sectors lose a need for knowledge workers. Imagine 1,000 skilled UX designers meticulously annotating their work over the course of a year in a way that a tranformer can train on. The current state-of-the-art in UX will get crystalized. That knowedge will then be the &lt;em&gt;least&lt;/em&gt; someone can know about UX. So to be as blunt as possible, &lt;strong&gt;if it&amp;rsquo;s your job to know things GPT is coming for your paycheck&lt;/strong&gt;. GPT connects a human and a need for knowledge with a solution wrapped up in the context of their problem.&lt;/p&gt;
&lt;p&gt;But on the other hand, &lt;strong&gt;if it&amp;rsquo;s your job to discover truly novel information, GPT can&amp;rsquo;t compete with you&lt;/strong&gt;. Only so much can be inferred from the Socratic method. Without real-world testing your tower of assumptions will quickly fall over.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re about to find out what it&amp;rsquo;s like to crash into a post information scarcity reality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working With GPT</title>
      <link>https://danangell.com/blog/posts/working-with-gpt/</link>
      <pubDate>Fri, 07 Apr 2023 17:14:55 -0700</pubDate>
      
      <guid>https://danangell.com/blog/posts/working-with-gpt/</guid>
      <description>&lt;p&gt;The programmer internet is polarizing over ChatGPT. Some claim that it is nearly AGI, some claim it cannot do anything of value, with plenty of people in between. I&amp;rsquo;ve worked with GPT-3 professionally, used CoPilot for over a year, and recently started programming side-projects with the assistance of ChatGPT (I pay for GPT-4 access). I&amp;rsquo;m considering working with LLMs full time again, so I pay close attention to what the GPT models can actually do.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s actually not very obvious what ChatGPT is good at for a number of reasons. But the trickiest is that &lt;strong&gt;ChatGPT is multiple things at once&lt;/strong&gt;, and all through the same interface.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-as-a-search-engine&#34; &gt;ChatGPT as a Search Engine
&lt;span&gt;
    &lt;a href=&#34;#chatgpt-as-a-search-engine&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;There are some things that ChatGPT has seen enough times, and the humans prompting it are not divided over, which you can ask it about without much chance of failure.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: When was Abraham Lincoln born?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: Abraham Lincoln was born on February 12, 1809.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Abraham_Lincoln&#34;&gt;Checks out&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or more on topic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: How do I copy a docker build argument into an environment variable within a Dockerfile?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: In a Dockerfile, you can copy a build argument into an environment variable using the &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;ENV&lt;/code&gt; instructions. Here&amp;rsquo;s how to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, use the ARG instruction to define a build argument, with a default value if desired:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; MY_BUILD_ARG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;default_value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Then, use the ENV instruction to create an environment variable and set its value to the build argument:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; MY_ENV_VAR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MY_BUILD_ARG&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I could have used the docker documentation or Stack Overflow to get the same result. But ChatGPT can also get this right, and most helpfully it can take your specific needs and customize the output to them:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: How do I copy a docker build argument into an environment variable within a Dockerfile? My PaaS provides the argument COMMIT_ID and I need it to be exposed as GIT_COMMIT in my container, with &amp;ldquo;unset&amp;rdquo; as the fallback value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: To copy the &lt;code&gt;COMMIT_ID&lt;/code&gt; build argument into the &lt;code&gt;GIT_COMMIT&lt;/code&gt; environment variable with a fallback value of &amp;ldquo;unset&amp;rdquo;, you can use the &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;ENV&lt;/code&gt; instructions in your Dockerfile. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Define the build argument and set the fallback value&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; COMMIT_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unset

&lt;span style=&#34;color:#75715e&#34;&gt;# Copy the build argument into an environment variable&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; GIT_COMMIT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;COMMIT_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The problem is that for more esoteric questions ChatGPT may make up an answer. It&amp;rsquo;s primed to be very careful about making up news events, but not so much docker commands. So for situations where you do not have instant feedback from your computer on the correctness of ChatGPT&amp;rsquo;s output, it is not a suitable replacement for a search engine.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-as-an-overpowered-markov-chain&#34; &gt;ChatGPT as an Overpowered Markov Chain
&lt;span&gt;
    &lt;a href=&#34;#chatgpt-as-an-overpowered-markov-chain&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;My favorite ChatGPT use case from the last month was in translating documentation into an enum. The Prisma NodeJS database ORM is generally pretty good, but it&amp;rsquo;s not perfect. I&amp;rsquo;d asked ChatGPT, as a search engine, how I can detect if a Postgres insert fails due to a uniqueness constraint on a specific column:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: I have a prisma model WebhookEvent. How can I tell if an insert to the table failed because of the unique constraint on the &lt;code&gt;event_id&lt;/code&gt; column?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: When you try to insert a record with a unique constraint violation in Prisma, it will throw a &lt;code&gt;PrismaClientKnownRequestError&lt;/code&gt; with a specific error code. To check if the insert failed due to the unique constraint on the event_id column, you can catch the error and verify its code and related metadata.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;webhookEvent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;webhookEvent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;webhookEventData&lt;/span&gt;,
  });
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;webhookEvent&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (
    &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaClientKnownRequestError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;P2002&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;meta&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;event_id&amp;#39;&lt;/span&gt;)
  ) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Insert failed due to a unique constraint violation on the event_id column.&amp;#39;&lt;/span&gt;);
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;An unexpected error occurred:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This also &lt;a href=&#34;https://community.redwoodjs.com/t/how-to-handle-prisma-unique-constraints-with-a-friendly-error/4117&#34;&gt;checks out&lt;/a&gt; as of a few months ago. And it&amp;rsquo;s nice that ChatGPT was able to tailor the solution to my code base.&lt;/p&gt;
&lt;p&gt;But that bit that says &lt;code&gt;error.code === &amp;quot;P2002&amp;quot;&lt;/code&gt; seems lame. There should be some source of truth for these error codes, right?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: Is there an enum in Prisma that I can reference instead of using &lt;code&gt;&amp;quot;P2002&amp;quot;&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: Yes, Prisma has an enum called PrismaErrorCode that you can use to reference error codes instead of hardcoding them as strings. Here&amp;rsquo;s how you can update the previous example to use the PrismaErrorCode enum:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaClient&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@prisma/client&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaErrorCode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UniqueConstraintViolation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;And&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Property &#39;PrismaErrorCode&#39; does not exist on type &#39;typeof Prisma&#39;.ts(2339)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It seems ChatGPT has lied to me! But that&amp;rsquo;s not an issue because the TypeScript compiler won&amp;rsquo;t. And shockingly, there actually isn&amp;rsquo;t any source of truth for Prisma error codes. A quick Google search will turn up &lt;a href=&#34;https://www.prisma.io/docs/reference/api-reference/error-reference&#34;&gt;this page&lt;/a&gt; as the only reference available.&lt;/p&gt;
&lt;p&gt;I would still love to have an enum, though&amp;hellip;&lt;/p&gt;
&lt;p&gt;ChatGPT to the rescue! All I need to do is forgive the beefy markov chain, and embrace its pattern-matching nature. Here I&amp;rsquo;ve just copied everything from the docs and pasted it into the prompt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: Can you turn this documentation into a typescript enum for prisma error codes? Please include comments on each enum variant, along with descriptive and concise names:&lt;/p&gt;
&lt;p&gt;Error codes&lt;/p&gt;
&lt;p&gt;Common&lt;/p&gt;
&lt;p&gt;P1000&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Authentication failed against database server at {database_host}, the provided database credentials for {database_user} are not valid. Please make sure to provide valid database credentials for the database server at {database_host}.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;P1001&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Can&amp;rsquo;t reach database server at {database_host}:{database_port} Please make sure your database server is running at {database_host}:{database_port}.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;P1002&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;: Here is an enum representing Prisma error codes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaError&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;// Common
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthenticationFailed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1000&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseServerUnreachable&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1001&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseServerTimeout&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1002&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseDoesNotExist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1003&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;OperationTimeout&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1008&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseAlreadyExists&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1009&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;AccessDenied&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1010&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;TlsConnectionError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1011&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaValidationError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1012&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;InvalidDatabaseString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1013&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;UnderlyingModelError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1014&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;UnsupportedDatabaseFeatures&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1015&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;IncorrectNumberOfParameters&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1016&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ConnectionClosed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P1017&amp;#34;&lt;/span&gt;,

  &lt;span style=&#34;color:#75715e&#34;&gt;// Prisma Client (Query Engine)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ColumnValueTooLong&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P2000&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;RecordNotFound&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P2001&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;UniqueConstraintFailed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P2002&amp;#34;&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;p&gt;Now, it didn&amp;rsquo;t do everything I asked. It didn&amp;rsquo;t &amp;ldquo;include comments on each enum variant&amp;rdquo;. But god damn. This is quite the solution! Not only is it all correct, the names are also impressively good! &lt;code&gt;DatabaseServerUnreachable&lt;/code&gt; does not appear in the source docs, that name is synthesized from the error description. And now we have the full (at time of writing) error list to reference as our code-base grows.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;if&lt;/code&gt; statement&amp;rsquo;s much better now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (
  &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Prisma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaClientKnownRequestError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrismaError&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UniqueConstraintFailed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;meta&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;event_id&amp;#39;&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That worked really well. But I&amp;rsquo;ve noticed that for times where I get too deep into higher-kinded types with Typescript ChatGPT will fail pretty hard. To be fair, when I try to write the code manually I also struggle. That kind of code is usually there for ego-stroking, though. So maybe it&amp;rsquo;s best left un-written.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34; &gt;Conclusion
&lt;span&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;ChatGPT is a tool. It&amp;rsquo;s a tool that tricks you into thinking it knows more than it does. But once you learn its capabilities it&amp;rsquo;s useful. Not just day-to-day, but multiple times per hour. It can take a while to learn how much is too much to ask of it. Writing in an uncommon language? You&amp;rsquo;ll have much more trouble than asking it to write React code. Rewriting your code to meet the demands of a new user? Sorry, not yet.&lt;/p&gt;
&lt;p&gt;But the models will only get better from here. And hooking GPT into a search engine, a compiler, and your documentation will give it super powers. Right now it feels like a 15-20% speed boost for coding. But when it takes away some painful work like restructuring documentation into code and you feel that 100x time save - oh man that&amp;rsquo;s a taste of the future right there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChatGPT&#39;s Political Compass</title>
      <link>https://danangell.com/blog/posts/chatgpt-political-compass/</link>
      <pubDate>Mon, 05 Dec 2022 16:06:30 -0800</pubDate>
      
      <guid>https://danangell.com/blog/posts/chatgpt-political-compass/</guid>
      <description>&lt;p&gt;This is written in response to &lt;a href=&#34;https://davidrozado.substack.com/p/the-political-orientation-of-the&#34;&gt;this post&lt;/a&gt; from David Rozado.&lt;/p&gt;
&lt;h2 id=&#34;results&#34; &gt;Results
&lt;span&gt;
    &lt;a href=&#34;#results&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I ran the political compass quiz against ChatGPT 3 times to make sure its political compass alignment is consistent. After three tests it seems to be be pegged well into the Left/Libertarian quadrant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/compass.png&#34; alt=&#34;Aggregate political compass results for ChatGPT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Transcripts: &lt;a href=&#34;https://danangell.com/blog/blog/political-compass-transcripts/1&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://danangell.com/blog/blog/political-compass-transcripts/2&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://danangell.com/blog/blog/political-compass-transcripts/3&#34;&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;weaseling&#34; &gt;Weaseling
&lt;span&gt;
    &lt;a href=&#34;#weaseling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;To start off I want to call out that &lt;a href=&#34;https://www.politicalcompass.org/test&#34;&gt;the political compass test&lt;/a&gt; is by no means a definitive source on what it means to be left, right, libertarian or authoritarian. Further, the dimensions chosen and the scales of those dimensions are subjective. It&amp;rsquo;s not possible to define the origin objectively either. But the general takeaway that ChatGPT is left of center and more libertarian than authoritarian seems true.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34; &gt;The Problem
&lt;span&gt;
    &lt;a href=&#34;#the-problem&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;If you ask ChatGPT about its political beliefs directly you&amp;rsquo;ll get stonewalled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/stonewalling.png&#34; alt=&#34;ChatGPT stonewalling me on political beliefs&#34;&gt;&lt;/p&gt;
&lt;p&gt;Not only is this clearly not the case - it&amp;rsquo;s impossible (let&amp;rsquo;s ignore any semantic arguments over whether a pattern replicated by a model counts as a belief). As long as ChatGPT can discuss topics that are political in nature it will have a political center-of-mass. And, sadly, any topic can become political.&lt;/p&gt;
&lt;p&gt;In my opinion it would be better for the model to be honest with us. OpenAI has built short-circuits to keep ChatGPT from discussing certain topics. But the model might be too complicated for them to actually rope off areas that will give the company PR troubles.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;honest&lt;/em&gt; way for ChatGPT to respond would be closer to:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;I am a large language model from OpenAI that has been trained on what can be
read on the internet. Any political beliefs I repeat are pulled from the
general concensus of online discussion in the English language.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;peaking-behind-the-curtain&#34; &gt;Peaking Behind the Curtain
&lt;span&gt;
    &lt;a href=&#34;#peaking-behind-the-curtain&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;While ChatGPT has been told explicitely by OpenAI &lt;em&gt;not&lt;/em&gt; to discuss certain topics, the model it uses has a lineage that closely ties it to the standard &lt;code&gt;text-davinci&lt;/code&gt; model accessible in the &lt;a href=&#34;https://beta.openai.com/playground&#34;&gt;OpenAI playground&lt;/a&gt;. This model lacks those restrictions.&lt;/p&gt;
&lt;p&gt;With the guard rails down we can get some interesting answers from GPT-3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/socially.png&#34; alt=&#34;GPT-3&amp;rsquo;s political beliefs regarding social policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s awesome about the playground is you can display the probability map. Not only have I been able to coax an answer out of GPT-3, but I know that 68% of the time (in a neutral setting) it would claim to be socially progressive or liberal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://danangell.com/blog/blog/image/chatgpt/fiscally.png&#34; alt=&#34;GPT-3&amp;rsquo;s political beliefs regarding fiscal policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;And 72% of the time it would claim to be fiscally moderate.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34; &gt;The Solution
&lt;span&gt;
    &lt;a href=&#34;#the-solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Because a lot of our human interaction takes place over text-only media we are primed to believe that ChatGPT is getting close to the capabilites of a human given its mastery of the English language. But that is a mistake. GPT-3 is amazing technology but it &lt;em&gt;is not&lt;/em&gt; a canonical source of information. You should not use it to answer questions that don&amp;rsquo;t have a well-established objective answer. We need to understand that GPT-3 is a program that correlates words to each other. It has no reasoning of its own - it only looks like it does because it was trained primarily on text written by humans that were reasoning as they wrote.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
